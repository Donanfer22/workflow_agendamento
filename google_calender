{
  "name": "GESTAO DE AGENDA",
  "nodes": [
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Cancela agendamento existente. Use quando paciente solicitar cancelamento de consulta.",
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', `Apague usando o id do agendamento`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2992,
        688
      ],
      "id": "db084846-17d3-485b-9c70-036237e3ab7b",
      "name": "deletar_agenda",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Cria novo agendamento na agenda da cl√≠nica. Use quando paciente solicitar consulta ou retorno. Agende somente em horario de atendimento, e o tempo de atendimento agende de acordo com o servi√ßo",
        "calendar": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', `Data e hor√°rio de in√≠cio da consulta no formato ISO 8601 com timezone de S√£o Paulo. \nFormato: YYYY-MM-DDTHH:mm:ss-03:00\nExemplo: 2024-12-15T14:30:00-03:00 (para 15/12/2024 √†s 14:30)\nRespeitar hor√°rio de funcionamento: Seg-S√°b 8h-18h`, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', `Data e hor√°rio de t√©rmino da consulta no formato ISO 8601 com timezone de S√£o Paulo.\nFormato: YYYY-MM-DDTHH:mm:ss-03:00  \nExemplo: 2024-12-15T15:30:00-03:00 (para 15/12/2024 √†s 15:30)\nCalcular automaticamente: in√≠cio + dura√ß√£o do procedimento`, 'string') }}",
        "additionalFields": {
          "description": "={{ $('Edit Fields').last().json.id }}",
          "id": "={{ Date.now().toString() + Math.random().toString(36).substr(2, 3) }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `T√≠tulo do evento: Nome do paciente + tipo de consulta`, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2976,
        848
      ],
      "id": "c9969a52-e5af-4fdf-8c88-67282b8d3012",
      "name": "criar_agenda",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Edit Fields').last().json.id }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2768,
        704
      ],
      "id": "4ef446c8-51e2-4004-bfad-dd0b72067f81",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2640,
        704
      ],
      "id": "bb07ddb9-d89f-4192-8046-79a47149f990",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Junta tudo em uma s√≥ e deleta').last().json.mensagensAgrupadas }}",
        "options": {
          "systemMessage": "=# ü¶∑ SECRET√ÅRIO ODONTOL√ìGICO VIRTUAL\n\n## üéØ MISS√ÉO\nVoc√™ √© o secret√°rio especializado de cl√≠nica odontol√≥gica via WhatsApp. Gerencie agendamentos, esclare√ßa d√∫vidas sobre procedimentos e ofere√ßa atendimento humanizado como um profissional experiente.\n\n**ID Usu√°rio:** {{ $('Edit Fields').last().json.id }} (inserido automaticamente)\n**Data/Hora:** {{ $now.setZone(\"America/Sao_Paulo\").setLocale(\"pt-BR\").toFormat(\"cccc, dd/MM/yyyy '√†s' HH:mm\") }}\n**Nome do cliente:** {{ $('Edit Fields').last().json.nome }} (insira no summary em cada agendamento)\n\n---\n\n{{ $json.procedimentos_markdown }}\n\n**‚è∞ Funcionamento:** Segunda a S√°bado das 8h √†s 18h\n\n---\n\n## üè• BASE DE CONHECIMENTO DA CL√çNICA\n\n**üîç Supabase Vector Store** - Informa√ß√µes gerais da cl√≠nica\n- Use para: hist√≥rico, equipe, diferenciais, pol√≠ticas e localiza√ß√£o\n- Acione quando: paciente perguntar sobre a cl√≠nica, m√©dicos ou estrutura\n\n### **QUANDO USAR A RAG:**\n- ‚úÖ Quem s√£o os dentistas e especialidades\n- ‚úÖ Hist√≥ria e tradi√ß√£o da cl√≠nica  \n- ‚úÖ Localiza√ß√£o e estrutura\n- ‚úÖ Conv√™nios e formas de pagamento\n- ‚úÖ Pol√≠ticas espec√≠ficas de atendimento\n\n---\n\n## üõ†Ô∏è FERRAMENTAS DISPON√çVEIS\n\n**üîç busca_agenda** - Verificar disponibilidade e localizar agendamentos\n- After/Before: Datas no formato ISO (2024-01-15T00:00:00)\n\n**üÜï criar_agenda** - Novos agendamentos\n- Start/End: Hor√°rios ISO | Summary: Nome + procedimento\n\n**‚úèÔ∏è atualizar_agenda** - Reagendamentos\n- Event_ID: ID do evento encontrado na busca\n\n**‚ùå deletar_agenda** - Cancelamentos  \n- Event_ID: ID do evento encontrado na busca\n\n**‚≠ê NPS** - Satisfa√ß√£o (notas 0-10)\n- nota_nps: N√∫mero da avalia√ß√£o\n\n---\n\n## üîÑ PROCESSOS OBRIGAT√ìRIOS\n\n### **AGENDAMENTO:**\n1. **BUSCAR** disponibilidade com busca_agenda\n2. **INFORMAR** procedimento, dura√ß√£o e pre√ßo\n3. **VALIDAR** que hor√°rio in√≠cio + dura√ß√£o n√£o passe de 18h\n4. **CONFIRMAR** hor√°rio dentro do funcionamento (Seg-S√°b 8h-18h)\n5. **VERIFICAR** se hor√°rio n√£o tem conflito com agendamentos existentes\n6. **CRIAR** agendamento com dados completos com a tool \"criar_agenda\" APENAS se passou em todas as valida√ß√µes\n7. **CONFIRMAR** sucesso ao paciente\n\n### **REAGENDAMENTO:**\n1. **LOCALIZAR** agendamento existente (busca_agenda em per√≠odo amplo)\n2. **IDENTIFICAR** Event_ID correto\n3. **BUSCAR** novos hor√°rios dispon√≠veis\n4. **ATUALIZAR** com novo hor√°rio confirmado \"atualizar_agenda\"\n\n### **CANCELAMENTO:**\n1. **LOCALIZAR** agendamento\n2. **CONFIRMAR** dados com paciente\n3. **DELETAR** usando Event_ID correto e a tool \"deletar_agenda\"\n4. **CONFIRMAR** cancelamento realizado\n\n---\n\n## üéØ REGRAS CR√çTICAS\n\n### **HOR√ÅRIOS:**\n- ‚úÖ Apenas Segunda a S√°bado 8h √†s 18h\n- ‚úÖ SEMPRE verificar disponibilidade antes de agendar\n- ‚úÖ Usar formato ISO: YYYY-MM-DDTHH:mm:ss\n- üö® **VALIDA√á√ÉO OBRIGAT√ìRIA:** Hor√°rio de in√≠cio + dura√ß√£o do procedimento DEVE terminar at√© √†s 18h\n- üö® **NUNCA agendar** se o procedimento terminar ap√≥s 18h (ex: procedimento de 2h √†s 17h = termina 19h = PROIBIDO)\n\n### **CONFLITOS E DISPONIBILIDADE:**\n- üö® **NUNCA agendar** em hor√°rio ocupado, independente da situa√ß√£o\n- üö® **SEMPRE usar busca_agenda** para verificar conflitos antes de criar agendamento\n- üö® **Se hor√°rio solicitado estiver ocupado ou inv√°lido:** sugerir alternativas, NUNCA for√ßar agendamento\n\n### **PROCEDIMENTOS:**\n- ‚úÖ Sempre informar dura√ß√£o e pre√ßo\n- ‚úÖ Calcular hor√°rio fim automaticamente (in√≠cio + dura√ß√£o)\n- ‚úÖ **VALIDAR** que hor√°rio fim n√£o passa de 18h\n- ‚úÖ Explicar benef√≠cios e cuidados quando questionado\n\n---\n\n## REGISTRAR NPS\n\n**Ap√≥s o cliente enviar a nota**: use a tool \"NPS\" para registrar a nota\n\n--- \n\n## ü¶∑ ORIENTA√á√ïES ODONTOL√ìGICAS\n\n### **COMO SECRET√ÅRIO ESPECIALIZADO:**\n- **Esclare√ßa d√∫vidas** sobre procedimentos e tratamentos\n- **Oriente cuidados** pr√© e p√≥s-procedimento\n- **Explique benef√≠cios** de cada tratamento\n- **Tranquilize pacientes** com informa√ß√µes precisas\n- **Sugira procedimentos** adequados quando apropriado\n\n### **EMERG√äNCIAS:**\n- **Dor intensa:** Priorizar primeiro hor√°rio dispon√≠vel\n- **Trauma/Sangramento:** Orientar procurar pronto-socorro se grave\n- **Quebra de dente:** Agendar com urg√™ncia e orientar cuidados\n\n---\n\n## üí¨ COMUNICA√á√ÉO HUMANIZADA\n\n**Formato WhatsApp:** Use *negrito*, üìÖ datas, üïê hor√°rios, üí∞ pre√ßos\n\n**Tom:** Profissional, acolhedor e informativo como secret√°rio experiente\n\n**Template Agendamento:**\n```\nOl√°! üòä \n\n**PROCEDIMENTO SELECIONADO:**\nüìã [Nome] - üïê [X]min - üí∞ R$ [valor]\n\nVerificando disponibilidade...\n\n**HOR√ÅRIOS LIVRES:**\nüìÖ [Op√ß√µes dispon√≠veis]\n\nQual prefere?\n```\n\n---\n\n## ‚ö° DIRETRIZES ABSOLUTAS\n\n### **‚úÖ SEMPRE:**\n- Use busca_agenda ANTES de qualquer opera√ß√£o\n- Confirme procedimento, hor√°rio e pre√ßo\n- Respeite hor√°rio de funcionamento rigorosamente\n- Registre NPS quando usu√°rio der nota 0-10\n- Atenda como secret√°rio experiente e acolhedor\n\n### **‚ùå NUNCA:**\n- Agende fora do hor√°rio de funcionamento\n- Agende procedimentos que terminem ap√≥s 18h\n- Agende em hor√°rio ocupado, independente da situa√ß√£o\n- Execute sem verificar disponibilidade E conflitos\n- Ignore feedback de satisfa√ß√£o\n- Seja rob√≥tico - seja humano e profissional\n- Force agendamento em hor√°rio inv√°lido ou ocupado\n\n---\n\n**üéØ FOCO: GEST√ÉO COMPLETA DA AGENDA + ATENDIMENTO HUMANIZADO COMO SECRET√ÅRIO ODONTOL√ìGICO ESPECIALIZADO**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2832,
        400
      ],
      "id": "a74c0ef9-a0d2-40ec-96c4-f7331092f25b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/SUA_INSTANCIA/token/SEU_TOKEN/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Webhook').last().json.body.phone }}"
            },
            {
              "name": "message",
              "value": "={{ $('Contabilizar Caracteres').last().json.result }}"
            },
            {
              "name": "delayTyping",
              "value": "10"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4192,
        416
      ],
      "id": "8b630ee5-856a-4949-9b24-f50fa551d4f7",
      "name": "Responde usu√°rio"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "61cfae58-b041-4717-8b23-65c372a72aab",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1808,
        400
      ],
      "id": "3bc88cd9-c793-4e9c-9aa8-f233c7a6fff3",
      "name": "Webhook",
      "webhookId": "61cfae58-b041-4717-8b23-65c372a72aab"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "clientes_clinica",
        "filters": {
          "conditions": [
            {
              "keyName": "numero",
              "keyValue": "={{ $json.body.phone }}"
            },
            {
              "keyName": "clinica_id",
              "keyValue": "550e8400-e29b-41d4-a716-446655440000"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1568,
        400
      ],
      "id": "665e6603-b230-4cb3-bee0-f01eaa6b9a9d",
      "name": "GET Supabase User",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "hecbcE9NFbf9ljB8",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{ $json.id }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              },
              "id": "ade3711d-2e20-4a36-9e56-b7512be47621"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1360,
        400
      ],
      "id": "627cd10e-0ba6-4836-9116-dbf222dfaa2a",
      "name": "IF User Exists"
    },
    {
      "parameters": {
        "tableId": "clientes_clinica",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "Nome",
              "fieldValue": "={{ $('Webhook').last().json.body.chatName }}"
            },
            {
              "fieldId": "numero",
              "fieldValue": "={{ $('Webhook').last().json.body.phone }}"
            },
            {
              "fieldId": "clinica_id",
              "fieldValue": "550e8400-e29b-41d4-a716-446655440000"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1152,
        544
      ],
      "id": "f8ff159e-fd00-4037-9d8d-e90fed78a1e4",
      "name": "Create Supabase User",
      "credentials": {
        "supabaseApi": {
          "id": "hecbcE9NFbf9ljB8",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -48,
        0
      ],
      "id": "b2e0e70a-0110-47be-ac29-aa08c385c7bf",
      "name": "OpenAI2",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').last().json.body.audio.audioUrl }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "4b1037f5-f934-4c7f-b5ac-8aa32f15a9d4"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "√Åudio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fd0a4cc8-bafd-4d9e-b1c6-e1bcec3222a5",
                    "leftValue": "={{ $('Webhook').last().json.body.text.message }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2806e774-4536-4428-aee6-82c982d7bc05",
                    "leftValue": "={{ $('Webhook').last().json.body.image.imageUrl }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Imagem"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a50f50a2-8394-4206-b4b1-f60ddac653c2",
                    "leftValue": "={{ $('Webhook').last().json.body.video.videoUrl }}",
                    "rightValue": "videoMessage",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "V√≠deo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "34d0e9a4-b734-4867-9783-ff00ca082680",
                    "leftValue": "={{ $('Webhook').last().json.body.document.documentUrl }}",
                    "rightValue": "documentMessage",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Documento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ff6924b3-6743-4352-969b-548c9919eb2d",
                    "leftValue": "={{ $('Webhook').last().json.body.contact.vCard }}",
                    "rightValue": "={{ $('Webhook').item.json.body.contact.vCard }}",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Contato"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -528,
        320
      ],
      "id": "683e4ed5-46a3-4e1b-9132-45940da565cc",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "77dc0d61-64cc-41b6-a1e2-f410a0e0e667",
              "name": "=text",
              "value": "=Usu√°rio enviou um v√≠deo. Explique pra ele que voc√™ n√£o pode baixar v√≠deos. ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        416
      ],
      "id": "10375b74-0a12-4d4c-b76f-fbb5ae48b9df",
      "name": "Aviso contra v√≠deo"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "009b7b4b-63e1-4c2c-957d-bd11bd8d63c1",
              "name": "=text",
              "value": "Usu√°rio enviou um Documento. Explique pra ele que voc√™ n√£o pode baixar documentos. ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        560
      ],
      "id": "c353b197-4131-47bc-b251-9f200c21ee2d",
      "name": "Aviso contra doc"
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        224,
        320
      ],
      "id": "7e7eaedf-069d-4880-99a6-f68ad8215699",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "={{ $('Webhook').item.json.body.audio.audioUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        0
      ],
      "id": "b67cc4c5-e192-4c57-88db-bd1a67a102aa",
      "name": "Audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "78d859be-3ccf-47bb-b5e5-aca0ce8c019e",
              "name": "text",
              "value": "={{ $('Webhook').last().json.body.text.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        128
      ],
      "id": "de58bc07-e249-4cda-bd6c-b055c385c1a6",
      "name": "Mensagem"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "116a7aa9-9b71-4bb2-b882-f54a6fa380b6",
              "name": "=text",
              "value": "Usu√°rio enviou um Imagem. Explique pra ele que voc√™ n√£o pode baixar Imagens. ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -192,
        272
      ],
      "id": "c93f2853-3ef1-4fe4-9699-81c482d3660c",
      "name": "Aviso de Imagem"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').last().json.body.phone }}",
        "messageData": "={{ $json.text }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        512,
        368
      ],
      "id": "8288a0da-4eca-4591-94c8-9b6c87138752",
      "name": "Redis3",
      "credentials": {
        "redis": {
          "id": "tRo5AMN7sFpQlAWn",
          "name": "Youtube"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "mensagens",
        "key": "={{ $('Webhook').last().json.body.phone }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1040,
        368
      ],
      "id": "948f506a-cd9a-4443-87dd-f5abb5829594",
      "name": "Redis4",
      "credentials": {
        "redis": {
          "id": "tRo5AMN7sFpQlAWn",
          "name": "Youtube"
        }
      }
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        768,
        368
      ],
      "id": "746df3e7-06b0-4864-ab66-b78c763d3619",
      "name": "Wait2",
      "webhookId": "5dcfe7db-6872-409c-b1d9-ff953e0366b1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f2dca984-a179-42e6-9a6d-30b07a1b07a2",
              "leftValue": "={{ $('Junta tudo em uma s√≥ e deleta').item.json.mensagensAgrupadas  }}",
              "rightValue": "nenhuma mensagem",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1568,
        368
      ],
      "id": "b80a3e9d-f2d1-4d2b-a811-22b0d8371dff",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Webhook').last().json.body.phone }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1792,
        400
      ],
      "id": "ffb40323-0f8a-41f9-8808-4801cc3dd035",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "tRo5AMN7sFpQlAWn",
          "name": "Youtube"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3552,
        400
      ],
      "id": "00a6a5dc-8811-4c16-8393-4e7131f5c54b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Obt√©m todos os itens do n√≥ \"Code\"\nconst codeNode = $('Loop Over Items').all();\n\n// Verifica se h√° itens no n√≥ \"Code\"\nif (!codeNode || codeNode.length === 0) {\n  return [{ json: { erro: \"Nenhum dado encontrado no n√≥ 'Code'.\" } }];\n}\n\n// Array para armazenar os resultados\nconst output = [];\n\n// Processa cada item do n√≥ \"Code\"\ncodeNode.forEach(item => {\n  // Obt√©m o texto corretamente\n  const text = item.json.result || \"\";\n\n  // Verifica se o texto √© v√°lido\n  if (!text || text.trim() === \"\") {\n    output.push({ json: { erro: \"Texto ausente ou inv√°lido\" } });\n    return;\n  }\n\n  // Conta o n√∫mero de caracteres na mensagem\n  const characterCount = text.length;\n\n  // Calcula os milissegundos (100 caracteres = 10000 ms)\n  const milliseconds = Math.floor((characterCount / 100) * 10000);\n\n  // Adiciona o resultado ao array de sa√≠da\n  output.push({ json: { result: text, characterCount, milliseconds } });\n});\n\n// Retorna os resultados\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        416
      ],
      "id": "bfa06cfb-804f-4032-a2a6-af3744430eef",
      "name": "Contabilizar Caracteres",
      "notes": "Contabiliza caraacteres para saber o tempo"
    },
    {
      "parameters": {
        "amount": "=0"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3952,
        416
      ],
      "id": "0b05bb31-0cb7-463a-b9fc-db613d83d481",
      "name": "Wait1",
      "webhookId": "21cabbfa-7a22-4d32-b3d7-ff9e57ad9ce1"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// FORMATA√á√ÉO UNIVERSAL PARA WHATSAPP\n// Funciona para QUALQUER tipo de mensagem\n// ========================================\n\n// Obt√©m a sa√≠da do Agent\nconst output = $('AI Agent').first()?.json?.output || '';\n\nconsole.log('üì• TEXTO ORIGINAL:', output);\n\n// Se vazio, retorna fallback\nif (!output || output.trim() === '') {\n    return [{ json: { result: \"Sem conte√∫do dispon√≠vel\" } }];\n}\n\n// ========= LIMPEZA UNIVERSAL PARA WHATSAPP =========\nfunction limparTexto(texto) {\n    return texto\n        .replace(/#/g, '') // Remove todas as #\n        .replace(/\\*\\*(.*?)\\*\\*/g, '*$1*') // ** para *\n        .replace(/---/g, '') // Remove ---\n        .replace(/\\n{3,}/g, '\\n\\n') // M√°ximo 2 quebras seguidas\n        .trim();\n}\n\n// ========= DIVIS√ÉO UNIVERSAL INTELIGENTE =========\nlet textoLimpo = limparTexto(output);\nlet mensagens = [];\n\n// M√âTODO 1: Divis√£o por par√°grafos naturais (\\n\\n)\nif (textoLimpo.includes('\\n\\n')) {\n    console.log('‚úÇÔ∏è DIVIDINDO POR PAR√ÅGRAFOS NATURAIS');\n    mensagens = textoLimpo\n        .split('\\n\\n')\n        .filter(p => p.trim().length > 0)\n        .map(p => p.trim());\n}\n\n// M√âTODO 2: Se n√£o tem par√°grafos, identifica blocos l√≥gicos\nelse {\n    console.log('‚úÇÔ∏è IDENTIFICANDO BLOCOS L√ìGICOS');\n    const linhas = textoLimpo.split('\\n').filter(l => l.trim().length > 0);\n    const blocos = [];\n    let blocoAtual = [];\n    \n    for (let i = 0; i < linhas.length; i++) {\n        const linha = linhas[i].trim();\n        blocoAtual.push(linha);\n        \n        // QUEBRA UNIVERSAL 1: Ap√≥s emoji + frase completa\n        if ((linha.includes('üòä') || linha.includes('ü¶∑') || linha.includes('üìã')) && \n            (linha.endsWith('!') || linha.endsWith('?'))) {\n            blocos.push(blocoAtual.join('\\n'));\n            blocoAtual = [];\n            continue;\n        }\n        \n        // QUEBRA UNIVERSAL 2: Antes de pergunta (linha que termina com ?)\n        if (i < linhas.length - 1 && linhas[i + 1].endsWith('?') && blocoAtual.length > 2) {\n            blocos.push(blocoAtual.join('\\n'));\n            blocoAtual = [];\n            continue;\n        }\n        \n        // QUEBRA UNIVERSAL 3: Ap√≥s lista longa (5+ itens que come√ßam com -)\n        if (linha.startsWith('- ') && i < linhas.length - 1 && !linhas[i + 1].startsWith('- ')) {\n            // Conta quantos itens de lista tem no bloco atual\n            const itensLista = blocoAtual.filter(l => l.startsWith('- ')).length;\n            if (itensLista >= 3) {\n                blocos.push(blocoAtual.join('\\n'));\n                blocoAtual = [];\n                continue;\n            }\n        }\n    }\n    \n    // Adiciona √∫ltimo bloco\n    if (blocoAtual.length > 0) {\n        blocos.push(blocoAtual.join('\\n'));\n    }\n    \n    mensagens = blocos.filter(b => b.trim().length > 0);\n}\n\n// M√âTODO 3: Controle de tamanho por mensagem\nmensagens = mensagens.flatMap(msg => {\n    // Se mensagem muito longa (>600 chars), tenta dividir\n    if (msg.length > 600) {\n        const linhasMsg = msg.split('\\n');\n        if (linhasMsg.length > 4) {\n            const meio = Math.floor(linhasMsg.length / 2);\n            return [\n                linhasMsg.slice(0, meio).join('\\n').trim(),\n                linhasMsg.slice(meio).join('\\n').trim()\n            ];\n        }\n    }\n    return [msg];\n});\n\n// M√âTODO 4: Limita a m√°ximo 3 mensagens\nif (mensagens.length > 3) {\n    console.log('üî¢ REAGRUPANDO PARA M√ÅXIMO 3 MENSAGENS');\n    const terco = Math.ceil(mensagens.length / 3);\n    \n    mensagens = [\n        mensagens.slice(0, terco).join('\\n\\n'),\n        mensagens.slice(terco, terco * 2).join('\\n\\n'),\n        mensagens.slice(terco * 2).join('\\n\\n')\n    ].filter(m => m.trim().length > 0);\n}\n\n// FALLBACK: Se algo deu errado, mant√©m original\nif (mensagens.length === 0) {\n    mensagens = [textoLimpo];\n}\n\nconsole.log('üìä TOTAL MENSAGENS:', mensagens.length);\n\n// ========= RESULTADO FINAL =========\nconst resultado = mensagens\n    .filter(msg => msg && msg.trim().length > 0)\n    .map((msg, index) => {\n        console.log(`üì± MSG ${index + 1} (${msg.length} chars):`, msg.substring(0, 60) + '...');\n        return { json: { result: msg.trim() } };\n    });\n\nconsole.log('‚úÖ FORMATA√á√ÉO UNIVERSAL CONCLU√çDA');\n\nreturn resultado;"
      },
      "id": "0b02b439-ce19-4c34-8a59-c9152ed3f3b5",
      "name": "formata√ß√£oTexto",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3248,
        400
      ],
      "retryOnFail": true,
      "notes": "Formata texto em varias mensagens para enviar"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "285d5278-6fbe-4d13-af3f-1cebe1072bb2",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "0be7cfde-0a0b-4031-9a9d-c968841d4816",
              "name": "nome",
              "value": "={{ $json.Nome }}",
              "type": "string"
            },
            {
              "id": "0251379b-bdbe-4f12-a528-47b4f29a9ceb",
              "name": "id_clinica",
              "value": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -752,
        368
      ],
      "id": "7ab9efde-6c35-4de6-b532-127b970e4e23",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use esta tool para buscar os agendamentos",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "returnAll": true,
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', `Inicio da data que quer buscar`, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', `Fim da data que quer buscar o agendamento`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        3120,
        688
      ],
      "id": "f297e6f9-4c2b-41f9-b877-5f6f413854ad",
      "name": "busca_agenda",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Modifica agendamento existente. Use para remarcar consultas ou alterar hor√°rios. Agende somente em horario de atendimento, e o tempo de atendimento agende de acordo com o servi√ßo. ",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', `Atualize usando o id do agendamento especifico, use a sua tool busca_agenda para coletar este ID `, 'string') }}",
        "updateFields": {
          "description": "={{ $('Edit Fields').last().json.id }}",
          "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', `Data e hor√°rio de t√©rmino da consulta no formato ISO 8601 com timezone de S√£o Paulo. Formato: YYYY-MM-DDTHH:mm:ss-03:00. Exemplo: 2024-12-15T15:30:00-03:00 (para 15/12/2024 √†s 15:30). Calcular automaticamente: in√≠cio + dura√ß√£o do procedimento`, 'string') }}",
          "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', `Data e hor√°rio de t√©rmino da consulta no formato ISO 8601 com timezone de S√£o Paulo.\nFormato: YYYY-MM-DDTHH:mm:ss-03:00  \nExemplo: 2024-12-15T15:30:00-03:00 (para 15/12/2024 √†s 15:30)\nCalcular automaticamente: in√≠cio + dura√ß√£o do procedimento`, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', `T√≠tulo do evento: Nome do paciente + tipo de consulta`, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        3120,
        848
      ],
      "id": "8741f3ba-2a1e-4c25-b9e9-40b9e2666824",
      "name": "atualizar_agenda",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use esta tool para registrar a nota que a pessoa deu para a NPS",
        "operation": "update",
        "tableId": "clientes_clinica",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Edit Fields').last().json.id }}"
            },
            {
              "keyName": "clinica_id",
              "condition": "eq",
              "keyValue": "550e8400-e29b-41d4-a716-446655440000"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "nota_nps",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fieldValues0_Field_Value', `Coloque aqui a nota que a pessoa deu para a NPS em formato de numero apenas`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2896,
        704
      ],
      "id": "d5df28e5-c0e6-4d01-8d0d-85478a450a5d",
      "name": "NPS",
      "credentials": {
        "supabaseApi": {
          "id": "hecbcE9NFbf9ljB8",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use esta RAG para pesquisa todas as especifica√ß√µes da clinica historia, particularidades, tudo.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 6,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        2656,
        880
      ],
      "id": "07a4daa4-17de-4de8-a76a-d9d590702385",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "hecbcE9NFbf9ljB8",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        2720,
        1040
      ],
      "id": "fab47bdf-6f1a-40cc-9728-92613f97c9b0",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// CODE N8N - FORMATA√á√ÉO DIN√ÇMICA DE PROCEDIMENTOS\n// Recebe JSON de procedimentos e formata para uso em prompts\n// =====================================================\n\n// Obt√©m todos os itens de entrada\nconst inputData = $input.all();\nconst procedimentos = [];\n\n// Processa cada item de entrada\nfor (const item of inputData) {\n  // Verifica se o item tem dados de procedimento\n  if (item.json) {\n    // Se for um array de procedimentos\n    if (Array.isArray(item.json)) {\n      procedimentos.push(...item.json);\n    }\n    // Se for um √∫nico procedimento\n    else if (item.json.nome_procedimento || item.json.id) {\n      procedimentos.push(item.json);\n    }\n    // Se os dados est√£o em uma propriedade espec√≠fica\n    else if (item.json.data && Array.isArray(item.json.data)) {\n      procedimentos.push(...item.json.data);\n    }\n  }\n}\n\n// Fun√ß√£o para formatar pre√ßo\nfunction formatarPreco(preco) {\n  if (!preco || preco === '' || preco === null) {\n    return '';\n  }\n  \n  // Se j√° tem R$, retorna como est√°\n  if (preco.toString().includes('R$')) {\n    return ` - ${preco}`;\n  }\n  \n  // Se √© n√∫mero, formata\n  const numero = parseFloat(preco);\n  if (!isNaN(numero)) {\n    return ` - R$ ${numero.toFixed(2).replace('.', ',')}`;\n  }\n  \n  // Se √© string, assume que est√° formatada\n  return ` - R$ ${preco}`;\n}\n\n// Fun√ß√£o para formatar tempo\nfunction formatarTempo(tempo) {\n  if (!tempo || tempo === '' || tempo === null) {\n    return '';\n  }\n  \n  // Se j√° tem \"min\", retorna como est√°\n  if (tempo.toString().includes('min')) {\n    return ` - ${tempo}`;\n  }\n  \n  // Se √© n√∫mero, adiciona \"min\"\n  const numero = parseInt(tempo);\n  if (!isNaN(numero)) {\n    return ` - ${numero}min`;\n  }\n  \n  // Se √© string, assume que est√° formatada\n  return ` - ${tempo}min`;\n}\n\n// Gera o markdown formatado\nlet markdownProcedimentos = '# Procedimentos da Cl√≠nica\\n\\n';\n\nif (procedimentos.length === 0) {\n  markdownProcedimentos += '*Nenhum procedimento encontrado*';\n} else {\n  procedimentos.forEach((proc, index) => {\n    // Nome do procedimento\n    const nome = proc.nome_procedimento || proc.nome || proc.title || `Procedimento ${index + 1}`;\n    \n    // Pre√ßo formatado\n    const precoFormatado = formatarPreco(proc.pre√ßo || proc.preco || proc.price);\n    \n    // Tempo formatado  \n    const tempoFormatado = formatarTempo(proc.Tempo || proc.tempo || proc.duration || proc.duracao);\n    \n    // Adiciona item na lista\n    markdownProcedimentos += `‚Ä¢ **${nome}**${precoFormatado}${tempoFormatado}\\n`;\n  });\n}\n\n// Debug - log do resultado\nconsole.log('üìã PROCEDIMENTOS PROCESSADOS:', procedimentos.length);\nconsole.log('üìù MARKDOWN GERADO:', markdownProcedimentos);\n\n// Retorna o resultado formatado\nreturn [{\n  json: {\n    // Markdown formatado para usar em prompts\n    procedimentos_markdown: markdownProcedimentos,\n    \n    // Dados originais para refer√™ncia\n    procedimentos_raw: procedimentos,\n    \n    // Estat√≠sticas\n    total_procedimentos: procedimentos.length,\n    \n    // Vers√£o compacta (sem t√≠tulo, s√≥ lista)\n    procedimentos_lista: procedimentos.map(proc => {\n      const nome = proc.nome_procedimento || proc.nome || 'Sem nome';\n      const preco = formatarPreco(proc.pre√ßo || proc.preco || proc.price);\n      const tempo = formatarTempo(proc.Tempo || proc.tempo || proc.duration);\n      return `‚Ä¢ **${nome}**${preco}${tempo}`;\n    }).join('\\n'),\n    \n    // Apenas nomes (para valida√ß√£o)\n    nomes_procedimentos: procedimentos.map(proc => \n      proc.nome_procedimento || proc.nome || 'Sem nome'\n    ),\n    \n    // Para uso direto em express√µes n8n\n    lista_para_prompt: markdownProcedimentos\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2432,
        400
      ],
      "id": "f252fc05-12d5-40ca-b9db-9975b2a58802",
      "name": "Parse Procedimentos"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "produtos_clinicas",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "clinica_id",
              "condition": "eq",
              "keyValue": "550e8400-e29b-41d4-a716-446655440000"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2096,
        400
      ],
      "id": "5371e4fe-98b2-42d6-b5ef-1beba4674207",
      "name": "Busca Produtos",
      "credentials": {
        "supabaseApi": {
          "id": "hecbcE9NFbf9ljB8",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Garante que a vari√°vel mensagens sempre exista\nconst mensagens = $json.mensagens || [];\n\n// Garante que seja array\nconst lista = Array.isArray(mensagens) ? mensagens : [mensagens];\n\n// Remove qualquer item que contenha apenas link (ex: de √°udio)\nconst filtradas = lista.filter(msg => {\n  if (typeof msg !== 'string') return false;\n\n  // Remove se for s√≥ link do WhatsApp\n  const ehLink = msg.trim().match(/^https:\\/\\/mmg\\.whatsapp\\.net\\/.*$/);\n  return !ehLink;\n});\n\n// Se n√£o houver nenhuma mensagem √∫til, retorna um fallback\nif (filtradas.length === 0) {\n  return [{\n    json: {\n      mensagensAgrupadas: \"nenhuma mensagem\"\n    }\n  }];\n}\n\n// Junta as mensagens restantes\nreturn [{\n  json: {\n    mensagensAgrupadas: filtradas.join(' ')\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        368
      ],
      "id": "23d45745-4ae7-4466-818b-a9a5e2fae626",
      "name": "Junta tudo em uma s√≥ e deleta"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "calendarId": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "triggerOn": "eventCancelled",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTrigger",
      "typeVersion": 1,
      "position": [
        -1824,
        1024
      ],
      "id": "cbf7e49c-674e-4454-a9ac-721dc23cd448",
      "name": "Avisa  Cancelamento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "calendarId": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "triggerOn": "eventCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTrigger",
      "typeVersion": 1,
      "position": [
        -1824,
        1344
      ],
      "id": "092635da-982e-4d9c-a74e-330d97a96ac0",
      "name": "Avisa Agendamento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "calendarId": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "triggerOn": "eventUpdated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTrigger",
      "typeVersion": 1,
      "position": [
        -1824,
        1776
      ],
      "id": "fcbd8164-24a7-4bbd-8a73-79a256f9bdfa",
      "name": "Avisa Mudan√ßa",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# {{ $('Seta Mudan√ßa').item.json.eventoFormatado }}\n\n### {{ $json.contextoCompleto }}",
        "options": {
          "systemMessage": "=# Prompt para IA - Aviso de Atualiza√ß√£o de Agendamento\n\n## Sua Fun√ß√£o\nVoc√™ √© um assistente especializado em criar mensagens de notifica√ß√£o para o dono do estabelecimento via WhatsApp sobre atualiza√ß√µes em agendamentos. Sua tarefa √© informar sobre mudan√ßas que foram realizadas em um evento j√° existente.\n\n## Dados que Voc√™ Receber√°\n\n### 1. DADOS DO EVENTO ATUALIZADO (em string natural):\n```\nüîÑ EVENTO ATUALIZADO\n\nüìÖ Atendimento com cliente\nüë§ Cliente: cliente@email.com\nüìÜ Data: 06/07/2025\nüïê Hor√°rio: 14:30 √†s 15:30\nüìã Status: Confirmado\n‚è∞ Tempo restante: 2 dia(s)\nüîÑ Atualizado em: 04/07/2025 19:15:30\n```\n\n### 2. HIST√ìRICO DA CONVERSA (em string natural):\n```\nCliente: Preciso remarcar meu atendimento\nAgente: Claro! Qual hor√°rio voc√™ prefere?\nCliente: Pode ser √†s 14:30 ao inv√©s de 13:30?\nAgente: Perfeito! Vou alterar para 14:30\n[resto da conversa sobre a altera√ß√£o]\n```\n\n## Instru√ß√µes para Criar a Mensagem\n\n### ‚úÖ O QUE FAZER:\n1. **Analise o hist√≥rico** para entender o motivo da atualiza√ß√£o\n2. **Identifique o que foi alterado** com base na conversa (hor√°rio, data, cliente, etc.)\n3. **Destaque a urg√™ncia** se o evento est√° pr√≥ximo (menos de 24h)\n4. **Extraia informa√ß√µes do cliente** se dispon√≠veis no hist√≥rico\n5. **Mantenha tom alerta mas profissional** para chamar aten√ß√£o\n6. **Inclua emojis** para organizar e destacar informa√ß√µes importantes\n\n### ‚ùå O QUE N√ÉO FAZER:\n- N√£o assuma mudan√ßas que n√£o est√£o claras no hist√≥rico\n- N√£o use tom alarmista desnecess√°rio\n- N√£o inclua detalhes t√©cnicos sobre a atualiza√ß√£o\n- N√£o fa√ßa mensagens muito longas\n- N√£o omita informa√ß√µes importantes sobre a altera√ß√£o\n\n## Estrutura da Mensagem\n\nSua mensagem deve seguir esta estrutura:\n\n```\nüîÑ [T√≠tulo do aviso de atualiza√ß√£o]\n\nüë§ [Informa√ß√µes do cliente]\n\nüìã [O que foi alterado/motivo da mudan√ßa]\n\nüìÖ [Dados atuais do agendamento]\n\n‚ö†Ô∏è [Alerta de urg√™ncia se necess√°rio]\n\n[Observa√ß√µes importantes]\n```\n\n## Exemplos de Mensagens\n\n### Exemplo 1 - Remarca√ß√£o de Hor√°rio:\n```\nüîÑ **AGENDAMENTO REMARCADO**\n\nüë§ **Cliente:** Maria Silva\nüìß **Contato:** cliente@email.com\n\nüìã **Altera√ß√£o:** Hor√°rio alterado de 13:30 para 14:30\nüí¨ **Motivo:** Cliente solicitou remarca√ß√£o\n\nüìÖ **Dados atuais:**\nüóìÔ∏è Data: 06/07/2025  \nüïê Hor√°rio: 14:30 √†s 15:30\nüìã Status: Confirmado\n\n‚è∞ **Evento em 2 dias**\n```\n\n### Exemplo 2 - Altera√ß√£o Urgente:\n```\nüîÑ **AGENDAMENTO ALTERADO - URGENTE**\n\nüë§ **Cliente:** Jo√£o Santos\n\nüìã **Altera√ß√£o:** Data alterada para hoje\nüí¨ **Motivo:** Cliente tinha disponibilidade hoje\n\nüìÖ **Dados atuais:**\nüóìÔ∏è Data: 04/07/2025\nüïê Hor√°rio: 16:00 √†s 17:00  \nüìã Status: Confirmado\n\n‚ö†Ô∏è **ATEN√á√ÉO: Evento hoje em 3 horas!**\n```\n\n### Exemplo 3 - Mudan√ßa de Status:\n```\nüîÑ **STATUS DO AGENDAMENTO ALTERADO**\n\nüë§ **Cliente:** Ana Costa\n\nüìã **Altera√ß√£o:** Status alterado para confirmado\nüí¨ **Motivo:** Cliente confirmou presen√ßa\n\nüìÖ **Dados atuais:**\nüóìÔ∏è Data: 08/07/2025\nüïê Hor√°rio: 09:00 √†s 10:00\nüìã Status: Confirmado\n\n‚úÖ **Agendamento confirmado pelo cliente**\n```\n\n### Exemplo 4 - M√∫ltiplas Altera√ß√µes:\n```\nüîÑ **M√öLTIPLAS ALTERA√á√ïES NO AGENDAMENTO**\n\nüë§ **Cliente:** Carlos Oliveira\n\nüìã **Altera√ß√µes realizadas:**\n‚Ä¢ Hor√°rio: 10:00 ‚Üí 11:00\n‚Ä¢ Servi√ßo: Atendimento b√°sico ‚Üí Atendimento completo\n‚Ä¢ Status: Tentativo ‚Üí Confirmado\n\nüìÖ **Dados atuais:**\nüóìÔ∏è Data: 07/07/2025\nüïê Hor√°rio: 11:00 √†s 12:30\nüìã Status: Confirmado\n\nüí¨ **Cliente adicionou servi√ßo extra**\n```\n\n## Diretrizes Espec√≠ficas\n\n1. **Tom de Voz**: Alerta, informativo, profissional\n2. **Tamanho**: M√°ximo 8-10 linhas de texto\n3. **Prioridade**: Destacar o que mudou e quando\n4. **Urg√™ncia**: Alertar se evento est√° pr√≥ximo (menos de 24h)\n5. **Organiza√ß√£o**: Use emojis para separar se√ß√µes claramente\n6. **Completude**: Inclua dados atuais ap√≥s a altera√ß√£o\n\n## N√≠veis de Urg√™ncia\n\n### üö® CR√çTICO (menos de 2 horas):\n- Use \"URGENTE\" no t√≠tulo\n- Destaque tempo restante em vermelho conceitual\n- Priorize informa√ß√µes essenciais\n\n### ‚ö†Ô∏è ALTO (menos de 24 horas):\n- Use \"ATEN√á√ÉO\" no corpo da mensagem\n- Destaque que √© para hoje/amanh√£\n- Inclua tempo restante\n\n### üìã NORMAL (mais de 24 horas):\n- Mantenha tom informativo padr√£o\n- Foque nas altera√ß√µes realizadas\n- Inclua contexto quando dispon√≠vel\n\n## Prompt Final\n\nCom base no hist√≥rico da conversa e nos dados do evento atualizado, escreva uma mensagem de aviso para o dono do estabelecimento informando sobre as altera√ß√µes realizadas no agendamento. A mensagem deve ser:\n\n- Clara sobre o que foi alterado\n- Informativa sobre os dados atuais\n- Adequada ao n√≠vel de urg√™ncia\n- Profissional e bem organizada\n- Incluir o motivo da altera√ß√£o se identificado na conversa\n- **Adaptada ao tipo de neg√≥cio** identificado no hist√≥rico da conversa\n\n**IMPORTANTE:** Identifique o tipo de neg√≥cio pelo contexto da conversa e adapte a linguagem adequadamente (ex: consulta/procedimento para √°rea da sa√∫de, atendimento/servi√ßo para outras √°reas, etc.).\n\n**Responda apenas com a mensagem final, sem explica√ß√µes adicionais.**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -720,
        1776
      ],
      "id": "3fd8b1c9-93e9-4b5a-b3ac-64ef7e46eb4d",
      "name": "IA AVISO  ATUALIZA√á√ÉO"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# {{ $('Seta Agendamento').last().json.eventoFormatado }}\n\n### {{ $json.contextoCompleto }}",
        "options": {
          "systemMessage": "=# Prompt para IA - Aviso de Novo Agendamento ao Dono\n\n## Sua Fun√ß√£o\nVoc√™ √© um assistente especializado em criar mensagens de notifica√ß√£o para o dono do estabelecimento via WhatsApp. Sua tarefa √© informar sobre um novo agendamento que foi realizado, com base no hist√≥rico da conversa e nos dados do evento.\n\n## Dados que Voc√™ Receber√°\n\n### 1. DADOS DO EVENTO (em string natural):\n```\nüìÖ Atendimento com cliente\nüìÜ Data: 06/07/2025  \nüïê Hor√°rio: 13:30 √†s 14:30\n```\n\n### 2. HIST√ìRICO DA CONVERSA (em string natural):\n```\nCliente: Ol√°, gostaria de agendar um atendimento\nAgente: Ol√°! Claro, que tipo de servi√ßo voc√™ precisa?\nCliente: √â para [servi√ßo espec√≠fico]\nAgente: Perfeito! Temos hor√°rios dispon√≠veis...\n[resto da conversa]\n```\n\n## Instru√ß√µes para Criar a Mensagem\n\n### ‚úÖ O QUE FAZER:\n1. **Analise o hist√≥rico** para entender o contexto e identificar o cliente\n2. **Extraia informa√ß√µes relevantes** como nome do cliente, tipo de servi√ßo, observa√ß√µes importantes\n3. **Resuma o que foi tratado** de forma clara e objetiva\n4. **Confirme os dados do agendamento** usando as informa√ß√µes do evento\n5. **Mantenha tom profissional e direto** adequado para comunica√ß√£o empresarial\n6. **Inclua emojis moderadamente** para organizar a informa√ß√£o\n7. **Adapte-se ao tipo de neg√≥cio** baseado no contexto da conversa\n\n### ‚ùå O QUE N√ÉO FAZER:\n- N√£o invente informa√ß√µes que n√£o est√£o no hist√≥rico\n- N√£o use linguagem muito casual ou informal\n- N√£o inclua detalhes desnecess√°rios da conversa\n- N√£o fa√ßa a mensagem muito longa\n- N√£o omita informa√ß√µes importantes sobre o cliente\n\n## Estrutura da Mensagem\n\nSua mensagem deve seguir esta estrutura:\n\n```\nüîî [T√≠tulo do aviso]\n\nüë§ [Informa√ß√µes do cliente identificadas no hist√≥rico]\n\nüìã [Resumo do que foi tratado/solicitado]\n\nüìÖ [Dados do agendamento]\n\n[Observa√ß√µes importantes se houver]\n```\n\n## Exemplos de Mensagens\n\n### Exemplo 1 - Servi√ßo de Sa√∫de:\n```\nüîî *NOVO AGENDAMENTO REALIZADO*\n\nüë§ *Cliente:* Maria Silva  \nüìß *Contato:* (11) 99999-9999\n\nüìã *Solicita√ß√£o:* Consulta de avalia√ß√£o + procedimento espec√≠fico\n\nüìÖ *Agendado para:*\nüóìÔ∏è Data: 06/07/2025\nüïê Hor√°rio: 13:30 √†s 14:30\n\nüí¨ *Observa√ß√µes:* Cliente mencionou sintomas espec√≠ficos e urg√™ncia.\n```\n\n### Exemplo 2 - Servi√ßo de Beleza:\n```\nüîî *NOVO AGENDAMENTO REALIZADO*\n\nüë§ *Cliente:* Ana Costa  \nüìß *Contato:* cliente@email.com\n\nüìã *Solicita√ß√£o:* Procedimento est√©tico + orienta√ß√£o\n\nüìÖ *Agendado para:*\nüóìÔ∏è Data: 15/07/2025\nüïê Hor√°rio: 14:00 √†s 15:00\n\nüí¨ *Observa√ß√µes:* Primeira vez da cliente, solicitou informa√ß√µes detalhadas.\n```\n\n### Exemplo 3 - Servi√ßo Profissional:\n```\nüîî *NOVO AGENDAMENTO REALIZADO*\n\nüë§ *Cliente:* Jo√£o Santos\n\nüìã *Solicita√ß√£o:* Atendimento de rotina\n\nüìÖ *Agendado para:*\nüóìÔ∏è Data: 20/07/2025\nüïê Hor√°rio: 09:00 √†s 10:00\n```\n\n## Diretrizes Espec√≠ficas\n\n1. **Tom de Voz**: Profissional, informativo, direto\n2. **Tamanho**: M√°ximo 6-8 linhas de texto\n3. **Prioridade**: Informa√ß√µes do cliente e motivo da consulta\n4. **Clareza**: Dados do agendamento sempre destacados\n5. **Organiza√ß√£o**: Use emojis para separar se√ß√µes\n6. **Completude**: Inclua todas as informa√ß√µes relevantes dispon√≠veis\n\n## Prompt Final\n\nCom base no hist√≥rico da conversa e nos dados do evento fornecidos, escreva uma mensagem de aviso para o dono do estabelecimento informando sobre o novo agendamento que foi realizado. A mensagem deve ser:\n\n- Informativa sobre quem √© o cliente\n- Clara sobre o servi√ßo/atendimento solicitado  \n- Espec√≠fica sobre data e hor√°rio\n- Profissional e bem organizada\n- Incluir observa√ß√µes importantes mencionadas na conversa\n- **Adaptada ao tipo de neg√≥cio** identificado no hist√≥rico da conversa\n\n**IMPORTANTE:** Identifique o tipo de neg√≥cio pelo contexto da conversa e adapte a linguagem adequadamente (ex: consulta/procedimento para √°rea da sa√∫de, atendimento/servi√ßo para outras √°reas, etc.).\n\n**Responda apenas com a mensagem final, sem explica√ß√µes adicionais.**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -720,
        1344
      ],
      "id": "98bcc168-e9a5-4527-a126-d0d9cbde050a",
      "name": "IA AVISO AGENDAMENTO"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -736,
        1552
      ],
      "id": "fc33a683-0039-47e8-85a1-20cc4a7daa0e",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para formatar eventos ATUALIZADOS do Google Calendar no n8n\n// Use este c√≥digo em um node \"Code\" do n8n ap√≥s o trigger \"eventUpdated\"\n\n// Fun√ß√£o para formatar data e hora em portugu√™s brasileiro\nfunction formatarDataHora(dataInicio, dataFim) {\n  const inicio = new Date(dataInicio);\n  const fim = new Date(dataFim);\n  \n  // Op√ß√µes para formata√ß√£o da data\n  const opcoes = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZone: 'America/Sao_Paulo'\n  };\n  \n  const dataFormatada = inicio.toLocaleDateString('pt-BR', opcoes);\n  const horaInicio = inicio.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  const horaFim = fim.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  \n  return {\n    dataCompleta: dataFormatada,\n    horario: `${horaInicio} √†s ${horaFim}`,\n    data: inicio.toLocaleDateString('pt-BR'),\n    horaInicio: horaInicio,\n    horaFim: horaFim\n  };\n}\n\n// Fun√ß√£o para extrair email do convidado\nfunction extrairEmailConvidado(evento) {\n  if (evento.attendees && evento.attendees.length > 0) {\n    // Filtra apenas convidados que n√£o s√£o o organizador\n    const convidados = evento.attendees.filter(attendee => \n      attendee.email !== evento.organizer.email\n    );\n    \n    if (convidados.length > 0) {\n      return convidados[0].email; // Retorna o primeiro convidado\n    }\n  }\n  return null;\n}\n\n// Fun√ß√£o para identificar o status do evento\nfunction identificarStatusEvento(evento) {\n  const status = evento.status;\n  \n  switch(status) {\n    case 'confirmed':\n      return 'Confirmado';\n    case 'tentative':\n      return 'Tentativo';\n    case 'cancelled':\n      return 'Cancelado';\n    default:\n      return 'Status desconhecido';\n  }\n}\n\n// Fun√ß√£o para calcular tempo at√© o evento\nfunction tempoAteEvento(dataInicio) {\n  const agora = new Date();\n  const inicio = new Date(dataInicio);\n  const diffMs = inicio - agora;\n  const diffHoras = Math.floor(diffMs / (1000 * 60 * 60));\n  const diffDias = Math.floor(diffHoras / 24);\n  \n  if (diffDias > 0) {\n    return `${diffDias} dia(s)`;\n  } else if (diffHoras > 0) {\n    return `${diffHoras} hora(s)`;\n  } else if (diffMs > 0) {\n    const diffMinutos = Math.floor(diffMs / (1000 * 60));\n    return `${diffMinutos} minuto(s)`;\n  } else {\n    return 'Evento j√° passou';\n  }\n}\n\n// Fun√ß√£o principal para formatar o evento atualizado\nfunction formatarEventoAtualizado(evento) {\n  const summary = evento.summary || 'Evento sem t√≠tulo';\n  const emailConvidado = extrairEmailConvidado(evento);\n  const dataHora = formatarDataHora(evento.start.dateTime, evento.end.dateTime);\n  const statusEvento = identificarStatusEvento(evento);\n  const tempoRestante = tempoAteEvento(evento.start.dateTime);\n  \n  // Monta a string formatada para atualiza√ß√£o\n  let eventoFormatado = `üîÑ EVENTO ATUALIZADO\\n\\n`;\n  eventoFormatado += `üìÖ ${summary}`;\n  \n  if (emailConvidado) {\n    eventoFormatado += `\\nüë§ Cliente: ${emailConvidado}`;\n  }\n  \n  eventoFormatado += `\\nüìÜ Data: ${dataHora.data}`;\n  eventoFormatado += `\\nüïê Hor√°rio: ${dataHora.horario}`;\n  eventoFormatado += `\\nüìã Status: ${statusEvento}`;\n  eventoFormatado += `\\n‚è∞ Tempo restante: ${tempoRestante}`;\n  \n  // Adiciona informa√ß√µes de quando foi atualizado\n  const ultimaAtualizacao = new Date(evento.updated);\n  const atualizacaoFormatada = ultimaAtualizacao.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo'\n  });\n  eventoFormatado += `\\nüîÑ Atualizado em: ${atualizacaoFormatada}`;\n  \n  return {\n    eventoFormatado: eventoFormatado,\n    tipoEvento: 'atualiza√ß√£o',\n    summary: summary,\n    emailConvidado: emailConvidado,\n    data: dataHora.data,\n    horario: dataHora.horario,\n    horaInicio: dataHora.horaInicio,\n    horaFim: dataHora.horaFim,\n    dataCompleta: dataHora.dataCompleta,\n    statusEvento: statusEvento,\n    tempoRestante: tempoRestante,\n    ultimaAtualizacao: atualizacaoFormatada,\n    sequencia: evento.sequence || 0 // N√∫mero da sequ√™ncia de atualiza√ß√µes\n  };\n}\n\n// Processa os dados do input\nconst eventos = $input.all();\nconst eventosFormatados = [];\n\nfor (const item of eventos) {\n  const evento = item.json;\n  \n  // Verifica se realmente √© uma atualiza√ß√£o (n√£o um evento novo)\n  if (evento.sequence > 0 || evento.updated !== evento.created) {\n    const eventoProcessado = formatarEventoAtualizado(evento);\n    \n    eventosFormatados.push({\n      json: {\n        ...evento, // Mant√©m os dados originais\n        eventoFormatado: eventoProcessado.eventoFormatado,\n        tipoEvento: eventoProcessado.tipoEvento,\n        summary: eventoProcessado.summary,\n        emailConvidado: eventoProcessado.emailConvidado,\n        data: eventoProcessado.data,\n        horario: eventoProcessado.horario,\n        horaInicio: eventoProcessado.horaInicio,\n        horaFim: eventoProcessado.horaFim,\n        dataCompleta: eventoProcessado.dataCompleta,\n        statusEvento: eventoProcessado.statusEvento,\n        tempoRestante: eventoProcessado.tempoRestante,\n        ultimaAtualizacao: eventoProcessado.ultimaAtualizacao,\n        sequencia: eventoProcessado.sequencia\n      }\n    });\n  }\n}\n\nreturn eventosFormatados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1616,
        1776
      ],
      "id": "0b07f865-4bd2-4c41-937d-23b8cfc225bc",
      "name": "Seta Mudan√ßa"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para formatar eventos do Google Calendar no n8n\n// Use este c√≥digo em um node \"Code\" do n8n\n\n// Fun√ß√£o para formatar data e hora em portugu√™s brasileiro\nfunction formatarDataHora(dataInicio, dataFim) {\n  const inicio = new Date(dataInicio);\n  const fim = new Date(dataFim);\n  \n  // Op√ß√µes para formata√ß√£o da data\n  const opcoes = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZone: 'America/Sao_Paulo'\n  };\n  \n  const dataFormatada = inicio.toLocaleDateString('pt-BR', opcoes);\n  const horaInicio = inicio.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  const horaFim = fim.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  \n  return {\n    dataCompleta: dataFormatada,\n    horario: `${horaInicio} √†s ${horaFim}`,\n    data: inicio.toLocaleDateString('pt-BR'),\n    horaInicio: horaInicio,\n    horaFim: horaFim\n  };\n}\n\n// Fun√ß√£o para extrair email do convidado\nfunction extrairEmailConvidado(evento) {\n  if (evento.attendees && evento.attendees.length > 0) {\n    // Filtra apenas convidados que n√£o s√£o o organizador\n    const convidados = evento.attendees.filter(attendee => \n      attendee.email !== evento.organizer.email\n    );\n    \n    if (convidados.length > 0) {\n      return convidados[0].email; // Retorna o primeiro convidado\n    }\n  }\n  return null;\n}\n\n// Fun√ß√£o principal para formatar o evento\nfunction formatarEvento(evento) {\n  const summary = evento.summary || 'Evento sem t√≠tulo';\n  const emailConvidado = extrairEmailConvidado(evento);\n  const dataHora = formatarDataHora(evento.start.dateTime, evento.end.dateTime);\n  \n  // Monta a string formatada\n  let eventoFormatado = `üìÖ ${summary}`;\n  \n  if (emailConvidado) {\n    eventoFormatado += `\\nüë§ Cliente: ${emailConvidado}`;\n  }\n  \n  eventoFormatado += `\\nüìÜ Data: ${dataHora.data}`;\n  eventoFormatado += `\\nüïê Hor√°rio: ${dataHora.horario}`;\n  \n  return {\n    eventoFormatado: eventoFormatado,\n    summary: summary,\n    emailConvidado: emailConvidado,\n    data: dataHora.data,\n    horario: dataHora.horario,\n    horaInicio: dataHora.horaInicio,\n    horaFim: dataHora.horaFim,\n    dataCompleta: dataHora.dataCompleta\n  };\n}\n\n// Processa os dados do input\nconst eventos = $input.all();\nconst eventosFormatados = [];\n\nfor (const item of eventos) {\n  const evento = item.json;\n  const eventoProcessado = formatarEvento(evento);\n  \n  eventosFormatados.push({\n    json: {\n      ...evento, // Mant√©m os dados originais\n      eventoFormatado: eventoProcessado.eventoFormatado,\n      summary: eventoProcessado.summary,\n      emailConvidado: eventoProcessado.emailConvidado,\n      data: eventoProcessado.data,\n      horario: eventoProcessado.horario,\n      horaInicio: eventoProcessado.horaInicio,\n      horaFim: eventoProcessado.horaFim,\n      dataCompleta: eventoProcessado.dataCompleta\n    }\n  });\n}\n\nreturn eventosFormatados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1616,
        1344
      ],
      "id": "c6c790e8-6327-4211-978f-231f49751aec",
      "name": "Seta Agendamento"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para formatar eventos CANCELADOS do Google Calendar no n8n\n// Use este c√≥digo em um node \"Code\" do n8n ap√≥s o trigger \"eventCancelled\"\n\n// Fun√ß√£o para formatar data e hora em portugu√™s brasileiro\nfunction formatarDataHora(dataInicio, dataFim) {\n  const inicio = new Date(dataInicio);\n  const fim = new Date(dataFim);\n  \n  // Op√ß√µes para formata√ß√£o da data\n  const opcoes = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    timeZone: 'America/Sao_Paulo'\n  };\n  \n  const dataFormatada = inicio.toLocaleDateString('pt-BR', opcoes);\n  const horaInicio = inicio.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  const horaFim = fim.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  \n  return {\n    dataCompleta: dataFormatada,\n    horario: `${horaInicio} √†s ${horaFim}`,\n    data: inicio.toLocaleDateString('pt-BR'),\n    horaInicio: horaInicio,\n    horaFim: horaFim\n  };\n}\n\n// Fun√ß√£o para extrair email do convidado\nfunction extrairEmailConvidado(evento) {\n  if (evento.attendees && evento.attendees.length > 0) {\n    // Filtra apenas convidados que n√£o s√£o o organizador\n    const convidados = evento.attendees.filter(attendee => \n      attendee.email !== evento.organizer.email\n    );\n    \n    if (convidados.length > 0) {\n      return convidados[0].email; // Retorna o primeiro convidado\n    }\n  }\n  return null;\n}\n\n// Fun√ß√£o para calcular tempo at√© o evento (ou h√° quanto tempo foi cancelado)\nfunction tempoDoEvento(dataInicio) {\n  const agora = new Date();\n  const inicio = new Date(dataInicio);\n  const diffMs = Math.abs(inicio - agora);\n  const diffHoras = Math.floor(diffMs / (1000 * 60 * 60));\n  const diffDias = Math.floor(diffHoras / 24);\n  \n  if (inicio > agora) {\n    // Evento est√° no futuro\n    if (diffDias > 0) {\n      return `Evento em ${diffDias} dia(s)`;\n    } else if (diffHoras > 0) {\n      return `Evento em ${diffHoras} hora(s)`;\n    } else {\n      const diffMinutos = Math.floor(diffMs / (1000 * 60));\n      return `Evento em ${diffMinutos} minuto(s)`;\n    }\n  } else {\n    // Evento j√° passou\n    if (diffDias > 0) {\n      return `Evento h√° ${diffDias} dia(s)`;\n    } else if (diffHoras > 0) {\n      return `Evento h√° ${diffHoras} hora(s)`;\n    } else {\n      const diffMinutos = Math.floor(diffMs / (1000 * 60));\n      return `Evento h√° ${diffMinutos} minuto(s)`;\n    }\n  }\n}\n\n// Fun√ß√£o principal para formatar o evento cancelado\nfunction formatarEventoCancelado(evento) {\n  const summary = evento.summary || 'Evento sem t√≠tulo';\n  const emailConvidado = extrairEmailConvidado(evento);\n  const dataHora = formatarDataHora(evento.start.dateTime, evento.end.dateTime);\n  const tempoEvento = tempoDoEvento(evento.start.dateTime);\n  \n  // Monta a string formatada para cancelamento\n  let eventoFormatado = `‚ùå EVENTO CANCELADO\\n\\n`;\n  eventoFormatado += `üìÖ ${summary}`;\n  \n  if (emailConvidado) {\n    eventoFormatado += `\\nüë§ Cliente: ${emailConvidado}`;\n  }\n  \n  eventoFormatado += `\\nüìÜ Data: ${dataHora.data}`;\n  eventoFormatado += `\\nüïê Hor√°rio: ${dataHora.horario}`;\n  eventoFormatado += `\\n‚è∞ ${tempoEvento}`;\n  \n  // Adiciona informa√ß√µes de quando foi cancelado\n  const cancelamento = new Date(evento.updated);\n  const cancelamentoFormatado = cancelamento.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo'\n  });\n  eventoFormatado += `\\n‚ùå Cancelado em: ${cancelamentoFormatado}`;\n  \n  return {\n    eventoFormatado: eventoFormatado,\n    tipoEvento: 'cancelamento',\n    summary: summary,\n    emailConvidado: emailConvidado,\n    data: dataHora.data,\n    horario: dataHora.horario,\n    horaInicio: dataHora.horaInicio,\n    horaFim: dataHora.horaFim,\n    dataCompleta: dataHora.dataCompleta,\n    tempoEvento: tempoEvento,\n    canceladoEm: cancelamentoFormatado,\n    sequencia: evento.sequence || 0\n  };\n}\n\n// Processa os dados do input\nconst eventos = $input.all();\nconst eventosFormatados = [];\n\nfor (const item of eventos) {\n  const evento = item.json;\n  \n  // Verifica se realmente √© um cancelamento\n  if (evento.status === 'cancelled') {\n    const eventoProcessado = formatarEventoCancelado(evento);\n    \n    eventosFormatados.push({\n      json: {\n        ...evento, // Mant√©m os dados originais\n        eventoFormatado: eventoProcessado.eventoFormatado,\n        tipoEvento: eventoProcessado.tipoEvento,\n        summary: eventoProcessado.summary,\n        emailConvidado: eventoProcessado.emailConvidado,\n        data: eventoProcessado.data,\n        horario: eventoProcessado.horario,\n        horaInicio: eventoProcessado.horaInicio,\n        horaFim: eventoProcessado.horaFim,\n        dataCompleta: eventoProcessado.dataCompleta,\n        tempoEvento: eventoProcessado.tempoEvento,\n        canceladoEm: eventoProcessado.canceladoEm,\n        sequencia: eventoProcessado.sequencia\n      }\n    });\n  }\n}\n\nreturn eventosFormatados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1616,
        1024
      ],
      "id": "59c7db87-a436-46ee-9221-0d1abd187cbd",
      "name": "Seta Cancelamento"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -816,
        1168
      ],
      "id": "40e81ed4-4722-4726-a8f1-5b1bc440ff12",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# {{ $('Seta Cancelamento').last().json.eventoFormatado }}\n\n### {{ $json.contextoCompleto }}",
        "options": {
          "systemMessage": "=# Prompt para IA - Aviso de Cancelamento de Agendamento\n\n## Sua Fun√ß√£o\nVoc√™ √© um assistente especializado em criar mensagens de notifica√ß√£o para o dono do estabelecimento via WhatsApp sobre cancelamentos de agendamentos. Sua tarefa √© informar sobre eventos que foram cancelados, destacando a urg√™ncia e o impacto no neg√≥cio.\n\n## Dados que Voc√™ Receber√°\n\n### 1. DADOS DO EVENTO CANCELADO (em string natural):\n```\n‚ùå EVENTO CANCELADO\n\nüìÖ Consulta odontol√≥gica\nüë§ Cliente: cliente@email.com\nüìÜ Data: 06/07/2025\nüïê Hor√°rio: 13:30 √†s 14:30\nüìã Status: Cancelado\n‚è∞ Tempo at√© o evento: 2 hora(s)\nüö´ Cancelado em: 04/07/2025 11:15:30\n```\n\n### 2. HIST√ìRICO DA CONVERSA (em string natural\n```\nCliente: Preciso cancelar meu atendimento de amanh√£\nAgente: Claro! Posso ajudar com isso. Qual o motivo do cancelamento?\nCliente: Surgiu um imprevisto no trabalho\nAgente: Entendo. Vou cancelar seu hor√°rio das 13:30\nCliente: Obrigado. Posso reagendar para semana que vem?\n[resto da conversa sobre o cancelamento]\n```\n\n## Instru√ß√µes para Criar a Mensagem\n\n### ‚úÖ O QUE FAZER:\n1. **Analise o hist√≥rico** para entender o motivo do cancelamento\n2. **Destaque a urg√™ncia** se o cancelamento foi pr√≥ximo ao hor√°rio agendado\n3. **Identifique se o cliente quer reagendar** ou se √© cancelamento definitivo\n4. **Extraia informa√ß√µes do cliente** se dispon√≠veis no hist√≥rico\n5. **Alerte sobre o impacto** no faturamento/agenda\n6. **Mantenha tom alerta mas profissional** para chamar aten√ß√£o\n7. **Inclua emojis** para organizar e destacar informa√ß√µes importantes\n\n### ‚ùå O QUE N√ÉO FAZER:\n- N√£o seja dram√°tico ou alarmista desnecessariamente\n- N√£o critique o cliente ou a situa√ß√£o\n- N√£o inclua detalhes t√©cnicos sobre o cancelamento\n- N√£o fa√ßa mensagens muito longas\n- N√£o omita informa√ß√µes importantes sobre timing ou reagendamento\n\n## Estrutura da Mensagem\n\nSua mensagem deve seguir esta estrutura:\n\n```\nüö´ [T√≠tulo do aviso de cancelamento]\n\nüë§ [Informa√ß√µes do cliente]\n\nüìã [Motivo do cancelamento se identificado]\n\nüìÖ [Dados do agendamento cancelado]\n\n‚ö†Ô∏è [Alerta de urg√™ncia/impacto se necess√°rio]\n\n[Observa√ß√µes sobre reagendamento/pr√≥ximos passos]\n```\n\n## Exemplos de Mensagens\n\n### Exemplo 1 - Cancelamento com Reagendamento:\n```\nüö´ *CANCELAMENTO COM REAGENDAMENTO*\n\nüë§ *Cliente:* Maria Silva\n\nüìã *Motivo:* Imprevisto no trabalho\nüí¨ *Situa√ß√£o:* Cliente quer reagendar para semana que vem\n\nüìÖ *Agendamento cancelado:*\nüóìÔ∏è Data: 06/07/2025\nüïê Hor√°rio: 13:30 √†s 14:30\nüö´ Cancelado em: 04/07/2025 11:15\n\n‚è∞ *Cancelamento feito com 2 horas de anteced√™ncia*\n\n‚úÖ *Cliente interessado em reagendar*\n```\n\n### Exemplo 2 - Cancelamento Urgente:\n```\nüö´ *CANCELAMENTO URGENTE - √öLTIMA HORA*\n\nüë§ *Cliente:* Jo√£o Santos\n\nüìã *Motivo:* Emerg√™ncia familiar\nüí¨ *Situa√ß√£o:* Cancelamento definitivo\n\nüìÖ *Agendamento cancelado:*\nüóìÔ∏è Data: 04/07/2025\nüïê Hor√°rio: 16:00 √†s 17:00\nüö´ Cancelado em: 04/07/2025 15:30\n\nüö® *ATEN√á√ÉO: Cancelamento com apenas 30 minutos de anteced√™ncia!*\n\n‚ùå *Hor√°rio vago na agenda*\n```\n\n### Exemplo 3 - Cancelamento com Anteced√™ncia:\n```\nüö´ *AGENDAMENTO CANCELADO*\n\nüë§ *Cliente:* Ana Costa\n\nüìã *Motivo:* Mudan√ßa de planos pessoais\n\nüìÖ *Agendamento cancelado:*\nüóìÔ∏è Data: 10/07/2025\nüïê Hor√°rio: 09:00 √†s 10:00\nüö´ Cancelado em: 04/07/2025 14:20\n\n‚è∞ *Cancelamento feito com 6 dias de anteced√™ncia*\n\nüìù *Tempo suficiente para oferecer o hor√°rio a outros clientes*\n```\n\n### Exemplo 4 - Cancelamento Sem Motivo:\n```\nüö´ *CANCELAMENTO SEM JUSTIFICATIVA*\n\nüë§ **Cliente:** Carlos Oliveira\n\nüìã *Motivo:* N√£o informado\nüí¨ *Situa√ß√£o:* Cliente apenas solicitou cancelamento\n\nüìÖ *Agendamento cancelado:*\nüóìÔ∏è Data: 05/07/2025\nüïê Hor√°rio: 14:00 √†s 15:00\nüö´ Cancelado em: 04/07/2025 16:45\n\n‚è∞ *Cancelamento feito com 21 horas de anteced√™ncia*\n\n‚ö†Ô∏è *Considerar pol√≠tica de cancelamento*\n```\n\n## Diretrizes Espec√≠ficas\n\n1. **Tom de Voz**: Alerta, informativo, profissional\n2. **Tamanho**: M√°ximo 8-10 linhas de texto\n3. **Prioridade**: Destacar timing e impacto no neg√≥cio\n4. **Urg√™ncia**: Alertar sobre cancelamentos de √∫ltima hora\n5. **Organiza√ß√£o**: Use emojis para separar se√ß√µes claramente\n6. **Completude**: Inclua informa√ß√µes sobre reagendamento se dispon√≠vel\n\n## N√≠veis de Urg√™ncia\n\n### üö® CR√çTICO (menos de 2 horas):\n- Use \"URGENTE\" ou \"√öLTIMA HORA\" no t√≠tulo\n- Destaque o impacto no faturamento\n- Priorize informa√ß√µes sobre o hor√°rio vago\n\n### ‚ö†Ô∏è ALTO (menos de 24 horas):\n- Use \"ATEN√á√ÉO\" no corpo da mensagem\n- Destaque que afeta a agenda do dia\n- Inclua tempo restante at√© o hor√°rio\n\n### üìã NORMAL (mais de 24 horas):\n- Mantenha tom informativo padr√£o\n- Foque no motivo e possibilidade de reagendamento\n- Destaque oportunidade de oferecer hor√°rio a outros\n\n## Informa√ß√µes Importantes a Incluir\n\n1. **Timing do cancelamento** (quanto tempo antes do evento)\n2. **Motivo do cancelamento** (se identificado na conversa)\n3. **Inten√ß√£o de reagendamento** (se o cliente demonstrou interesse)\n4. **Impacto na agenda** (hor√°rio vago, oportunidade para outros)\n5. **Dados do cliente** (para poss√≠vel follow-up)\n\n## Prompt Final\n\nCom base no hist√≥rico da conversa e nos dados do evento cancelado, escreva uma mensagem de aviso para o dono do estabelecimento informando sobre o cancelamento. A mensagem deve ser:\n\n- Clara sobre o que foi cancelado e quando\n- Informativa sobre o motivo (se dispon√≠vel)\n- Adequada ao n√≠vel de urg√™ncia do timing\n- Profissional e bem organizada\n- Incluir informa√ß√µes sobre reagendamento se aplic√°vel\n- **Adaptada ao tipo de neg√≥cio** identificado no hist√≥rico da conversa\n\n**IMPORTANTE:** Identifique o tipo de neg√≥cio pelo contexto da conversa e adapte a linguagem adequadamente (ex: consulta/procedimento para √°rea da sa√∫de, atendimento/servi√ßo para outras √°reas, etc.).\n\n**Responda apenas com a mensagem final, sem explica√ß√µes adicionais.**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -704,
        1024
      ],
      "id": "9aeccfd3-5b35-4897-b7df-78a8d8dbd4c2",
      "name": "IA AVISA CANCELAMENTO"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.contextoCompleto }}",
        "options": {
          "systemMessage": "=# Prompt para IA - Pesquisa de Satisfa√ß√£o com Cliente\n\n## Sua Fun√ß√£o\nVoc√™ √© um assistente especializado em coletar feedback de clientes via WhatsApp ap√≥s o atendimento. Sua tarefa √© conduzir uma pesquisa de satisfa√ß√£o de forma natural, amig√°vel e eficiente, garantindo que o cliente se sinta valorizado e incentivado a dar feedback honesto.\n\n## Dados que Voc√™ Receber√°\n\n### 1. DADOS DO ATENDIMENTO CONCLU√çDO:\n```\n{{ $json.eventoFormatado }}\n```\n\n### 2. CONTEXTO COMPLETO (dados do cliente + hist√≥rico):\n```\n{{ $json.contextoCompleto }}\n```\n\n### 3. TIPO DE NEG√ìCIO:\n```\n{{ $json.tipoNegocio }}\n```\n\n### 4. INFORMA√á√ïES DO CLIENTE:\n- Nome: {{ $json.nomeCliente }}\n- Telefone: {{ $json.numeroCliente }}\n- Atendimento: {{ $json.tituloEvento }}\n\n## Objetivos da Pesquisa\n\n### üéØ **Objetivos Principais**\n1. **Coletar NPS** (Net Promoter Score) de 0 a 10\n2. **Identificar pontos de melhoria** no atendimento\n3. **Coletar elogios** para motivar a equipe\n4. **Incentivar retorno** do cliente\n5. **Demonstrar cuidado** com a experi√™ncia do cliente\n\n### üéØ **Objetivos Secund√°rios**\n- Identificar problemas que podem virar reclama√ß√µes\n- Coletar sugest√µes de novos servi√ßos\n- Fortalecer relacionamento com o cliente\n- Gerar conte√∫do para marketing (com permiss√£o)\n\n## Instru√ß√µes para Conduzir a Pesquisa\n\n### ‚úÖ **O QUE FAZER**\n1. **Inicie com agradecimento sincero** pelo atendimento\n2. **Personalize usando o nome** do cliente\n3. **Mencione o servi√ßo espec√≠fico** que foi realizado\n4. **Fa√ßa perguntas de forma natural** e conversacional\n5. **Seja genuinamente interessado** nas respostas\n6. **Adapte o tom ao tipo de neg√≥cio** (formal vs casual)\n7. **Encerre incentivando retorno** futuro\n\n### ‚ùå **O QUE N√ÉO FAZER**\n- N√£o seja rob√≥tico ou muito formal\n- N√£o fa√ßa muitas perguntas de uma vez\n- N√£o insista se o cliente n√£o quiser responder\n- N√£o ignore feedback negativo\n- N√£o termine abruptamente a conversa\n- N√£o pe√ßa para dar nota alta\n\n## Estrutura da Conversa\n\n### 1. **Abertura Personalizada**\n```\nOl√° [Nome]! Tudo bem? üòä\n\nEsperamos que seu [tipo de atendimento] tenha sido uma boa experi√™ncia!\n```\n\n### 2. **Pergunta Principal (NPS)**\n```\nQue tal nos ajudar com uma perguntinha r√°pida?\n\nDe 0 a 10, o quanto voc√™ recomendaria nosso atendimento para um amigo?\n```\n\n### 3. **Pergunta de Aprofundamento**\n```\n[Baseado na nota recebida]\n\n- Se 9-10: \"Que bom! O que mais te agradou?\"\n- Se 7-8: \"Obrigado! O que podemos melhorar?\"\n- Se 0-6: \"Que pena! Pode nos contar o que aconteceu?\"\n```\n\n### 4. **Encerramento Positivo**\n```\nMuito obrigado pelo seu feedback! üôè\n\n[Resposta personalizada baseada no tipo de neg√≥cio]\n\nAt√© a pr√≥xima! üòä\n```\n\n## Exemplos de Conversas\n\n### Exemplo 1 - √Årea da Sa√∫de (Consulta)\n```\nOl√° Vitor! Tudo bem? üòä\n\nEsperamos que sua consulta odontol√≥gica hoje tenha sido tranquila e esclarecedora!\n\nQue tal nos ajudar com uma perguntinha r√°pida?\n\nDe 0 a 10, o quanto voc√™ recomendaria nosso atendimento para um amigo ou familiar?\n\n---\n\n[Se responder 9-10]\nQue alegria saber que voc√™ gostou! üéâ\n\nO que mais te agradou no atendimento de hoje?\n\nE j√° aproveitando, lembre-se de que em 6 meses √© bom fazer uma nova avalia√ß√£o! \n\nQualquer d√∫vida ou necessidade, estamos aqui! ü¶∑‚ú®\n```\n\n### Exemplo 2 - √Årea da Beleza (Procedimento)\n```\nOi! Tudo bem? üòä\n\nEspero que tenha adorado o resultado do seu procedimento! ‚ú®\n\nQue tal me contar numa escala de 0 a 10: quanto voc√™ recomendaria nosso trabalho?\n\n---\n\n[Se responder 7-8]\nObrigado pela avalia√ß√£o! üòä\n\nO que podemos melhorar para chegar no 10 na pr√≥xima vez?\n\nLembre-se dos cuidados que orientamos e qualquer d√∫vida, pode chamar! \n\nAnsiosos para te ver novamente! üíÖ‚ú®\n```\n\n### Exemplo 3 - Servi√ßos Profissionais\n```\nOl√°! Tudo bem?\n\nEsperamos que nossa reuni√£o hoje tenha sido produtiva e esclarecedora!\n\nPode nos ajudar com um feedback r√°pido?\n\nDe 0 a 10, como voc√™ avalia nosso atendimento?\n\n---\n\n[Se responder 0-6]\nObrigado pela sinceridade! üòî\n\nPode nos contar o que n√£o atendeu suas expectativas? Queremos melhorar!\n\nSe desejar, podemos agendar uma nova conversa para esclarecer mel"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -688,
        2256
      ],
      "id": "b317730f-aa6a-40c1-9195-e81f651ebcb7",
      "name": "IA NPS"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/SUA_INSTANCIA/token/SEU_TOKEN/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "="
            },
            {
              "name": "message",
              "value": "={{ $json.texto_formatado }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -64,
        1024
      ],
      "id": "2cde276e-81aa-4b2c-8bbb-9eaa75feed6f",
      "name": "Mensagem Cancelamento"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/SUA_INSTANCIA/token/SEU_TOKEN/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "="
            },
            {
              "name": "message",
              "value": "={{ $json.texto_formatado }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -128,
        1344
      ],
      "id": "19120aff-79b9-4fe6-826d-c50fff8f0fe4",
      "name": "Mensagem Agendamento"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/SUA_INSTANCIA/token/SEU_TOKEN/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "="
            },
            {
              "name": "message",
              "value": "={{ $json.texto_formatado }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -128,
        1776
      ],
      "id": "b4bf0178-d3bd-4992-a7f9-9fe9db53f1e1",
      "name": "Mensagem Atualiza√ß√£o"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.z-api.io/instances/SUA_INSTANCIA/token/SEU_TOKEN/send-text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "client-token"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $('Busca Usu√°rio NPS').last().json.cliente_numero }}"
            },
            {
              "name": "message",
              "value": "={{ $json.texto_formatado }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        2256
      ],
      "id": "f636c6f0-5fa8-434e-b8e8-29eabe65b6bb",
      "name": "Mensagem NPS"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- SQL CORRIGIDO - USA O CAMPO \"ID\" DO EVENTO\n-- =====================================================\nSELECT \n    -- Dados do evento\n    '{{ $json.id }}' as evento_id,\n    \n    -- Dados do cliente\n    c.id as cliente_id,\n    c.\"Nome\" as cliente_nome,\n    c.numero as cliente_numero,\n    c.created_at as cliente_criado_em,\n    \n    -- Hist√≥rico de chat (√∫ltimas 10 mensagens)\n    (\n        SELECT JSON_AGG(\n            JSON_BUILD_OBJECT(\n                'id', n.id,\n                'session_id', n.session_id,\n                'message', n.message,\n                'created_at', n.created_at\n            ) ORDER BY n.created_at DESC\n        )\n        FROM (\n            SELECT * FROM n8n_chat_histories \n            WHERE session_id = '{{ $json.description }}'\n            ORDER BY created_at DESC \n            LIMIT 10\n        ) n\n    ) as historico_chat\n    \nFROM public.clientes_clinica c\nWHERE c.id = '{{ $json.description }}'::uuid\nLIMIT 1;\n\n-- =====================================================\n-- VERS√ÉO DE TESTE (PARA VERIFICAR SE A TABELA EXISTE)\n-- =====================================================\n/*\nSELECT \n    '{{ $json.id }}' as evento_id,\n    COUNT(*) as total_clientes\nFROM public.clientes_clinica;\n*/",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1504,
        2256
      ],
      "id": "9ee8cb14-5872-4acf-97bb-9b0d3a014db8",
      "name": "Busca Usu√°rio NPS",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- SQL CORRIGIDO - USA O CAMPO \"ID\" DO EVENTO\n-- =====================================================\nSELECT \n    -- Dados do evento\n    '{{ $json.id }}' as evento_id,\n    '{{ $json.summary }}' as evento_titulo,\n    \n    -- Dados do cliente\n    c.id as cliente_id,\n    c.\"Nome\" as cliente_nome,\n    c.numero as cliente_numero,\n    c.created_at as cliente_criado_em,\n    \n    -- Hist√≥rico de chat (√∫ltimas 10 mensagens)\n    (\n        SELECT JSON_AGG(\n            JSON_BUILD_OBJECT(\n                'id', n.id,\n                'session_id', n.session_id,\n                'message', n.message,\n                'created_at', n.created_at\n            ) ORDER BY n.created_at DESC\n        )\n        FROM (\n            SELECT * FROM n8n_chat_histories \n            WHERE session_id = '{{ $json.description }}'\n            ORDER BY created_at DESC \n            LIMIT 10\n        ) n\n    ) as historico_chat\n    \nFROM public.clientes_clinica c\nWHERE c.id = '{{ $json.description }}'::uuid\nLIMIT 1;\n\n-- =====================================================\n-- VERS√ÉO DE TESTE (PARA VERIFICAR SE A TABELA EXISTE)\n-- =====================================================\n/*\nSELECT \n    '{{ $json.id }}' as evento_id,\n    COUNT(*) as total_clientes\nFROM public.clientes_clinica;\n*/",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1360,
        1776
      ],
      "id": "5bdc38df-20d6-40bc-8893-1e2f762f9831",
      "name": "Busca Usu√°rio Atualiza√ß√£o",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- SQL CORRIGIDO - USA O CAMPO \"ID\" DO EVENTO\n-- =====================================================\nSELECT \n    -- Dados do evento\n    '{{ $json.id }}' as evento_id,\n    '{{ $json.summary }}' as evento_titulo,\n    \n    -- Dados do cliente\n    c.id as cliente_id,\n    c.\"Nome\" as cliente_nome,\n    c.numero as cliente_numero,\n    c.created_at as cliente_criado_em,\n    \n    -- Hist√≥rico de chat (√∫ltimas 10 mensagens)\n    (\n        SELECT JSON_AGG(\n            JSON_BUILD_OBJECT(\n                'id', n.id,\n                'session_id', n.session_id,\n                'message', n.message,\n                'created_at', n.created_at\n            ) ORDER BY n.created_at DESC\n        )\n        FROM (\n            SELECT * FROM n8n_chat_histories \n            WHERE session_id = '{{ $json.description }}'\n            ORDER BY created_at DESC \n            LIMIT 10\n        ) n\n    ) as historico_chat\n    \nFROM public.clientes_clinica c\nWHERE c.id = '{{ $json.description }}'::uuid\nLIMIT 1;\n\n-- =====================================================\n-- VERS√ÉO DE TESTE (PARA VERIFICAR SE A TABELA EXISTE)\n-- =====================================================\n/*\nSELECT \n    '{{ $json.id }}' as evento_id,\n    COUNT(*) as total_clientes\nFROM public.clientes_clinica;\n*/",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1408,
        1344
      ],
      "id": "e140eb95-4a10-46f0-b21e-402b878ee9e4",
      "name": "Busca Usu√°rio Agendamento",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- SQL CORRIGIDO - USA O CAMPO \"ID\" DO EVENTO\n-- =====================================================\nSELECT \n    -- Dados do evento\n    '{{ $json.id }}' as evento_id,\n    '{{ $json.summary }}' as evento_titulo,\n    \n    -- Dados do cliente\n    c.id as cliente_id,\n    c.\"Nome\" as cliente_nome,\n    c.numero as cliente_numero,\n    c.created_at as cliente_criado_em,\n    \n    -- Hist√≥rico de chat (√∫ltimas 10 mensagens)\n    (\n        SELECT JSON_AGG(\n            JSON_BUILD_OBJECT(\n                'id', n.id,\n                'session_id', n.session_id,\n                'message', n.message,\n                'created_at', n.created_at\n            ) ORDER BY n.created_at DESC\n        )\n        FROM (\n            SELECT * FROM n8n_chat_histories \n            WHERE session_id = '{{ $json.description }}'\n            ORDER BY created_at DESC \n            LIMIT 10\n        ) n\n    ) as historico_chat\n    \nFROM public.clientes_clinica c\nWHERE c.id = '{{ $json.description }}'::uuid\nLIMIT 1;\n\n-- =====================================================\n-- VERS√ÉO DE TESTE (PARA VERIFICAR SE A TABELA EXISTE)\n-- =====================================================\n/*\nSELECT \n    '{{ $json.id }}' as evento_id,\n    COUNT(*) as total_clientes\nFROM public.clientes_clinica;\n*/",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1360,
        1024
      ],
      "id": "6ecfee25-9431-47f2-b0a4-5944fba7c4b7",
      "name": "Busca Usu√°rio Cancelamento",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// VERS√ÉO SIMPLIFICADA - FORMATA√á√ÉO DE HIST√ìRICO\n// Use quando quiser algo mais direto e f√°cil de entender\n// =====================================================\n\n// Processa os dados do PostgreSQL\nconst dados = $input.all();\nconst resultados = [];\n\nfor (const item of dados) {\n  const dadosOriginais = item.json;\n  \n  // Extrai dados b√°sicos\n  const clienteNome = dadosOriginais.cliente_nome || 'Nome n√£o informado';\n  const clienteNumero = dadosOriginais.cliente_numero || 'N√∫mero n√£o informado';\n  const eventoTitulo = dadosOriginais.evento_titulo || 'Evento sem t√≠tulo';\n  const historicoChat = dadosOriginais.historico_chat || [];\n  \n  // Formata o hist√≥rico de conversa\n  let conversaFormatada = '';\n  \n  if (historicoChat.length > 0) {\n    conversaFormatada = 'HIST√ìRICO DA CONVERSA:\\n\\n';\n    \n    // Ordena mensagens por data (mais antigas primeiro)\n    const mensagensOrdenadas = historicoChat.sort((a, b) => {\n      return new Date(a.created_at) - new Date(b.created_at);\n    });\n    \n    // Formata cada mensagem\n    mensagensOrdenadas.forEach(msg => {\n      const tipo = msg.message?.type || 'desconhecido';\n      const conteudo = msg.message?.content || msg.message?.text || 'Mensagem sem conte√∫do';\n      \n      // Define o remetente\n      let remetente = 'Desconhecido';\n      if (tipo === 'ai') remetente = 'Agente';\n      if (tipo === 'human') remetente = 'Cliente';\n      \n      // Preserva quebras de linha importantes, mas remove excessivas\n      const conteudoLimpo = conteudo\n        .replace(/\\n{3,}/g, '\\n\\n')  // M√°ximo 2 quebras consecutivas\n        .trim();\n      \n      conversaFormatada += `${remetente}: ${conteudoLimpo}\\n\\n`;\n    });\n    \n    conversaFormatada += '[Fim do hist√≥rico]';\n  } else {\n    conversaFormatada = 'Nenhuma conversa anterior encontrada.';\n  }\n  \n  // Detecta tipo de neg√≥cio (vers√£o simplificada)\n  let tipoNegocio = 'geral';\n  const textoAnalise = `${eventoTitulo} ${conversaFormatada}`.toLowerCase();\n  \n  if (textoAnalise.includes('consulta') || textoAnalise.includes('m√©dico') || textoAnalise.includes('dentista')) {\n    tipoNegocio = 'saude';\n  } else if (textoAnalise.includes('corte') || textoAnalise.includes('cabelo') || textoAnalise.includes('manicure')) {\n    tipoNegocio = 'beleza';\n  } else if (textoAnalise.includes('aula') || textoAnalise.includes('curso') || textoAnalise.includes('treinamento')) {\n    tipoNegocio = 'educacao';\n  } else if (textoAnalise.includes('reuni√£o') || textoAnalise.includes('consultoria') || textoAnalise.includes('atendimento')) {\n    tipoNegocio = 'servicos';\n  }\n  \n  // Cria contexto completo\n  const contextoCompleto = `DADOS DO CLIENTE:\\n\\nNome: ${clienteNome}\\nN√∫mero: ${clienteNumero}\\n\\n${conversaFormatada}`;\n  \n  // Resultado final\n  resultados.push({\n    json: {\n      // Mant√©m dados originais\n      ...dadosOriginais,\n      \n      // Adiciona dados processados\n      contextoCompleto: contextoCompleto,\n      conversaFormatada: conversaFormatada,\n      tipoNegocio: tipoNegocio,\n      nomeCliente: clienteNome,\n      numeroCliente: clienteNumero,\n      tituloEvento: eventoTitulo,\n      totalMensagens: historicoChat.length,\n      temHistorico: historicoChat.length > 0\n    }\n  });\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        1024
      ],
      "id": "fb2dcec5-dd1e-4dbf-87f6-f8922fe3c8df",
      "name": "Hist√≥rico Cancelamento"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// VERS√ÉO SIMPLIFICADA - FORMATA√á√ÉO DE HIST√ìRICO\n// Use quando quiser algo mais direto e f√°cil de entender\n// =====================================================\n\n// Processa os dados do PostgreSQL\nconst dados = $input.all();\nconst resultados = [];\n\nfor (const item of dados) {\n  const dadosOriginais = item.json;\n  \n  // Extrai dados b√°sicos\n  const clienteNome = dadosOriginais.cliente_nome || 'Nome n√£o informado';\n  const clienteNumero = dadosOriginais.cliente_numero || 'N√∫mero n√£o informado';\n  const eventoTitulo = dadosOriginais.evento_titulo || 'Evento sem t√≠tulo';\n  const historicoChat = dadosOriginais.historico_chat || [];\n  \n  // Formata o hist√≥rico de conversa\n  let conversaFormatada = '';\n  \n  if (historicoChat.length > 0) {\n    conversaFormatada = 'HIST√ìRICO DA CONVERSA:\\n\\n';\n    \n    // Ordena mensagens por data (mais antigas primeiro)\n    const mensagensOrdenadas = historicoChat.sort((a, b) => {\n      return new Date(a.created_at) - new Date(b.created_at);\n    });\n    \n    // Formata cada mensagem\n    mensagensOrdenadas.forEach(msg => {\n      const tipo = msg.message?.type || 'desconhecido';\n      const conteudo = msg.message?.content || msg.message?.text || 'Mensagem sem conte√∫do';\n      \n      // Define o remetente\n      let remetente = 'Desconhecido';\n      if (tipo === 'ai') remetente = 'Agente';\n      if (tipo === 'human') remetente = 'Cliente';\n      \n      // Preserva quebras de linha importantes, mas remove excessivas\n      const conteudoLimpo = conteudo\n        .replace(/\\n{3,}/g, '\\n\\n')  // M√°ximo 2 quebras consecutivas\n        .trim();\n      \n      conversaFormatada += `${remetente}: ${conteudoLimpo}\\n\\n`;\n    });\n    \n    conversaFormatada += '[Fim do hist√≥rico]';\n  } else {\n    conversaFormatada = 'Nenhuma conversa anterior encontrada.';\n  }\n  \n  // Detecta tipo de neg√≥cio (vers√£o simplificada)\n  let tipoNegocio = 'geral';\n  const textoAnalise = `${eventoTitulo} ${conversaFormatada}`.toLowerCase();\n  \n  if (textoAnalise.includes('consulta') || textoAnalise.includes('m√©dico') || textoAnalise.includes('dentista')) {\n    tipoNegocio = 'saude';\n  } else if (textoAnalise.includes('corte') || textoAnalise.includes('cabelo') || textoAnalise.includes('manicure')) {\n    tipoNegocio = 'beleza';\n  } else if (textoAnalise.includes('aula') || textoAnalise.includes('curso') || textoAnalise.includes('treinamento')) {\n    tipoNegocio = 'educacao';\n  } else if (textoAnalise.includes('reuni√£o') || textoAnalise.includes('consultoria') || textoAnalise.includes('atendimento')) {\n    tipoNegocio = 'servicos';\n  }\n  \n  // Cria contexto completo\n  const contextoCompleto = `DADOS DO CLIENTE:\\n\\nNome: ${clienteNome}\\nN√∫mero: ${clienteNumero}\\n\\n${conversaFormatada}`;\n  \n  // Resultado final\n  resultados.push({\n    json: {\n      // Mant√©m dados originais\n      ...dadosOriginais,\n      \n      // Adiciona dados processados\n      contextoCompleto: contextoCompleto,\n      conversaFormatada: conversaFormatada,\n      tipoNegocio: tipoNegocio,\n      nomeCliente: clienteNome,\n      numeroCliente: clienteNumero,\n      tituloEvento: eventoTitulo,\n      totalMensagens: historicoChat.length,\n      temHistorico: historicoChat.length > 0\n    }\n  });\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        1776
      ],
      "id": "0c7d3d36-ca65-41ff-9a74-7d32223ccbda",
      "name": "Hist√≥rico Atualiza√ß√£o"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// VERS√ÉO SIMPLIFICADA - FORMATA√á√ÉO DE HIST√ìRICO\n// Use quando quiser algo mais direto e f√°cil de entender\n// =====================================================\n\n// Processa os dados do PostgreSQL\nconst dados = $input.all();\nconst resultados = [];\n\nfor (const item of dados) {\n  const dadosOriginais = item.json;\n  \n  // Extrai dados b√°sicos\n  const clienteNome = dadosOriginais.cliente_nome || 'Nome n√£o informado';\n  const clienteNumero = dadosOriginais.cliente_numero || 'N√∫mero n√£o informado';\n  const eventoTitulo = dadosOriginais.evento_titulo || 'Evento sem t√≠tulo';\n  const historicoChat = dadosOriginais.historico_chat || [];\n  \n  // Formata o hist√≥rico de conversa\n  let conversaFormatada = '';\n  \n  if (historicoChat.length > 0) {\n    conversaFormatada = 'HIST√ìRICO DA CONVERSA:\\n\\n';\n    \n    // Ordena mensagens por data (mais antigas primeiro)\n    const mensagensOrdenadas = historicoChat.sort((a, b) => {\n      return new Date(a.created_at) - new Date(b.created_at);\n    });\n    \n    // Formata cada mensagem\n    mensagensOrdenadas.forEach(msg => {\n      const tipo = msg.message?.type || 'desconhecido';\n      const conteudo = msg.message?.content || msg.message?.text || 'Mensagem sem conte√∫do';\n      \n      // Define o remetente\n      let remetente = 'Desconhecido';\n      if (tipo === 'ai') remetente = 'Agente';\n      if (tipo === 'human') remetente = 'Cliente';\n      \n      // Preserva quebras de linha importantes, mas remove excessivas\n      const conteudoLimpo = conteudo\n        .replace(/\\n{3,}/g, '\\n\\n')  // M√°ximo 2 quebras consecutivas\n        .trim();\n      \n      conversaFormatada += `${remetente}: ${conteudoLimpo}\\n\\n`;\n    });\n    \n    conversaFormatada += '[Fim do hist√≥rico]';\n  } else {\n    conversaFormatada = 'Nenhuma conversa anterior encontrada.';\n  }\n  \n  // Detecta tipo de neg√≥cio (vers√£o simplificada)\n  let tipoNegocio = 'geral';\n  const textoAnalise = `${eventoTitulo} ${conversaFormatada}`.toLowerCase();\n  \n  if (textoAnalise.includes('consulta') || textoAnalise.includes('m√©dico') || textoAnalise.includes('dentista')) {\n    tipoNegocio = 'saude';\n  } else if (textoAnalise.includes('corte') || textoAnalise.includes('cabelo') || textoAnalise.includes('manicure')) {\n    tipoNegocio = 'beleza';\n  } else if (textoAnalise.includes('aula') || textoAnalise.includes('curso') || textoAnalise.includes('treinamento')) {\n    tipoNegocio = 'educacao';\n  } else if (textoAnalise.includes('reuni√£o') || textoAnalise.includes('consultoria') || textoAnalise.includes('atendimento')) {\n    tipoNegocio = 'servicos';\n  }\n  \n  // Cria contexto completo\n  const contextoCompleto = `DADOS DO CLIENTE:\\n\\nNome: ${clienteNome}\\nN√∫mero: ${clienteNumero}\\n\\n${conversaFormatada}`;\n  \n  // Resultado final\n  resultados.push({\n    json: {\n      // Mant√©m dados originais\n      ...dadosOriginais,\n      \n      // Adiciona dados processados\n      contextoCompleto: contextoCompleto,\n      conversaFormatada: conversaFormatada,\n      tipoNegocio: tipoNegocio,\n      nomeCliente: clienteNome,\n      numeroCliente: clienteNumero,\n      tituloEvento: eventoTitulo,\n      totalMensagens: historicoChat.length,\n      temHistorico: historicoChat.length > 0\n    }\n  });\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        2256
      ],
      "id": "f9d0ab6d-455e-4b86-a0be-bb8790b2d536",
      "name": "Hist√≥rico NPS"
    },
    {
      "parameters": {
        "jsCode": "// =====================================================\n// VERS√ÉO SIMPLIFICADA - FORMATA√á√ÉO DE HIST√ìRICO\n// Use quando quiser algo mais direto e f√°cil de entender\n// =====================================================\n\n// Processa os dados do PostgreSQL\nconst dados = $input.all();\nconst resultados = [];\n\nfor (const item of dados) {\n  const dadosOriginais = item.json;\n  \n  // Extrai dados b√°sicos\n  const clienteNome = dadosOriginais.cliente_nome || 'Nome n√£o informado';\n  const clienteNumero = dadosOriginais.cliente_numero || 'N√∫mero n√£o informado';\n  const eventoTitulo = dadosOriginais.evento_titulo || 'Evento sem t√≠tulo';\n  const historicoChat = dadosOriginais.historico_chat || [];\n  \n  // Formata o hist√≥rico de conversa\n  let conversaFormatada = '';\n  \n  if (historicoChat.length > 0) {\n    conversaFormatada = 'HIST√ìRICO DA CONVERSA:\\n\\n';\n    \n    // Ordena mensagens por data (mais antigas primeiro)\n    const mensagensOrdenadas = historicoChat.sort((a, b) => {\n      return new Date(a.created_at) - new Date(b.created_at);\n    });\n    \n    // Formata cada mensagem\n    mensagensOrdenadas.forEach(msg => {\n      const tipo = msg.message?.type || 'desconhecido';\n      const conteudo = msg.message?.content || msg.message?.text || 'Mensagem sem conte√∫do';\n      \n      // Define o remetente\n      let remetente = 'Desconhecido';\n      if (tipo === 'ai') remetente = 'Agente';\n      if (tipo === 'human') remetente = 'Cliente';\n      \n      // Preserva quebras de linha importantes, mas remove excessivas\n      const conteudoLimpo = conteudo\n        .replace(/\\n{3,}/g, '\\n\\n')  // M√°ximo 2 quebras consecutivas\n        .trim();\n      \n      conversaFormatada += `${remetente}: ${conteudoLimpo}\\n\\n`;\n    });\n    \n    conversaFormatada += '[Fim do hist√≥rico]';\n  } else {\n    conversaFormatada = 'Nenhuma conversa anterior encontrada.';\n  }\n  \n  // Detecta tipo de neg√≥cio (vers√£o simplificada)\n  let tipoNegocio = 'geral';\n  const textoAnalise = `${eventoTitulo} ${conversaFormatada}`.toLowerCase();\n  \n  if (textoAnalise.includes('consulta') || textoAnalise.includes('m√©dico') || textoAnalise.includes('dentista')) {\n    tipoNegocio = 'saude';\n  } else if (textoAnalise.includes('corte') || textoAnalise.includes('cabelo') || textoAnalise.includes('manicure')) {\n    tipoNegocio = 'beleza';\n  } else if (textoAnalise.includes('aula') || textoAnalise.includes('curso') || textoAnalise.includes('treinamento')) {\n    tipoNegocio = 'educacao';\n  } else if (textoAnalise.includes('reuni√£o') || textoAnalise.includes('consultoria') || textoAnalise.includes('atendimento')) {\n    tipoNegocio = 'servicos';\n  }\n  \n  // Cria contexto completo\n  const contextoCompleto = `DADOS DO CLIENTE:\\n\\nNome: ${clienteNome}\\nN√∫mero: ${clienteNumero}\\n\\n${conversaFormatada}`;\n  \n  // Resultado final\n  resultados.push({\n    json: {\n      // Mant√©m dados originais\n      ...dadosOriginais,\n      \n      // Adiciona dados processados\n      contextoCompleto: contextoCompleto,\n      conversaFormatada: conversaFormatada,\n      tipoNegocio: tipoNegocio,\n      nomeCliente: clienteNome,\n      numeroCliente: clienteNumero,\n      tituloEvento: eventoTitulo,\n      totalMensagens: historicoChat.length,\n      temHistorico: historicoChat.length > 0\n    }\n  });\n}\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        1344
      ],
      "id": "48bd14ce-b39f-4c68-b34d-4203b1e8d7f2",
      "name": "Hist√≥rico Agendamento"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -704,
        2496
      ],
      "id": "9303c0fb-0a3c-4fc4-8dcc-d24c23599610",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para n√≥ Code - Formata√ß√£o WhatsApp\n// Remove todas as # e ajusta negrito para padr√£o WhatsApp\n\n// DEBUG: Vamos ver o que est√° chegando\nconsole.log(\"=== DEBUG ESTRUTURA DE DADOS ===\");\nconsole.log(\"$input:\", JSON.stringify($input, null, 2));\n\n// Tenta diferentes formas de acessar os dados\nlet texto = \"\";\n\n// Op√ß√£o 1: Estrutura padr√£o\nif ($input.item && $input.item.json) {\n    texto = $input.item.json.texto || \n            $input.item.json.message || \n            $input.item.json.content || \n            $input.item.json.body || \n            $input.item.json.output || \"\";\n}\n\n// Op√ß√£o 2: Direto no item\nif (!texto && $input.item) {\n    texto = $input.item.texto || \n            $input.item.message || \n            $input.item.content || \n            $input.item.body || \n            $input.item.output || \"\";\n}\n\n// Op√ß√£o 3: Primeiro item do array\nif (!texto && $input.first && $input.first()) {\n    const firstItem = $input.first();\n    texto = firstItem.json?.texto || \n            firstItem.json?.message || \n            firstItem.json?.content || \n            firstItem.json?.body || \n            firstItem.json?.output || \"\";\n}\n\n// Op√ß√£o 4: √öltimo item\nif (!texto && $input.last && $input.last()) {\n    const lastItem = $input.last();\n    texto = lastItem.json?.texto || \n            lastItem.json?.message || \n            lastItem.json?.content || \n            lastItem.json?.body || \n            lastItem.json?.output || \"\";\n}\n\nconsole.log(\"Texto encontrado:\", texto);\n\n// Fun√ß√£o principal de formata√ß√£o\nfunction formatarParaWhatsApp(texto) {\n    if (!texto || typeof texto !== 'string') {\n        console.log(\"Texto inv√°lido ou vazio:\", texto);\n        return texto;\n    }\n    \n    let textoFormatado = texto;\n    \n    // 1. Remove TODAS as hashtags (#, ##, ###, etc.)\n    textoFormatado = textoFormatado.replace(/#{1,}/g, '');\n    \n    // 2. Converte ** (negrito markdown) para * (negrito WhatsApp)\n    textoFormatado = textoFormatado.replace(/\\*\\*/g, '*');\n    \n    return textoFormatado;\n}\n\n// Se ainda n√£o encontrou texto, tenta como string direta\nif (!texto) {\n    texto = typeof $input === 'string' ? $input : '';\n}\n\nconsole.log(\"Texto final para processar:\", texto);\n\n// Aplica a formata√ß√£o\nconst textoLimpo = formatarParaWhatsApp(texto);\n\nconsole.log(\"Texto ap√≥s formata√ß√£o:\", textoLimpo);\n\n// Retorna o resultado\nreturn [{\n    json: {\n        texto_original: texto || \"Texto n√£o encontrado\",\n        texto_formatado: textoLimpo || \"Erro na formata√ß√£o\",\n        debug_input: JSON.stringify($input, null, 2),\n        // Mant√©m outros campos que possam existir\n        ...($input.item?.json || {})\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        1024
      ],
      "id": "313d9e71-e959-4fdd-abf3-13c816a7c674",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para n√≥ Code - Formata√ß√£o WhatsApp\n// Remove todas as # e ajusta negrito para padr√£o WhatsApp\n\n// DEBUG: Vamos ver o que est√° chegando\nconsole.log(\"=== DEBUG ESTRUTURA DE DADOS ===\");\nconsole.log(\"$input:\", JSON.stringify($input, null, 2));\n\n// Tenta diferentes formas de acessar os dados\nlet texto = \"\";\n\n// Op√ß√£o 1: Estrutura padr√£o\nif ($input.item && $input.item.json) {\n    texto = $input.item.json.texto || \n            $input.item.json.message || \n            $input.item.json.content || \n            $input.item.json.body || \n            $input.item.json.output || \"\";\n}\n\n// Op√ß√£o 2: Direto no item\nif (!texto && $input.item) {\n    texto = $input.item.texto || \n            $input.item.message || \n            $input.item.content || \n            $input.item.body || \n            $input.item.output || \"\";\n}\n\n// Op√ß√£o 3: Primeiro item do array\nif (!texto && $input.first && $input.first()) {\n    const firstItem = $input.first();\n    texto = firstItem.json?.texto || \n            firstItem.json?.message || \n            firstItem.json?.content || \n            firstItem.json?.body || \n            firstItem.json?.output || \"\";\n}\n\n// Op√ß√£o 4: √öltimo item\nif (!texto && $input.last && $input.last()) {\n    const lastItem = $input.last();\n    texto = lastItem.json?.texto || \n            lastItem.json?.message || \n            lastItem.json?.content || \n            lastItem.json?.body || \n            lastItem.json?.output || \"\";\n}\n\nconsole.log(\"Texto encontrado:\", texto);\n\n// Fun√ß√£o principal de formata√ß√£o\nfunction formatarParaWhatsApp(texto) {\n    if (!texto || typeof texto !== 'string') {\n        console.log(\"Texto inv√°lido ou vazio:\", texto);\n        return texto;\n    }\n    \n    let textoFormatado = texto;\n    \n    // 1. Remove TODAS as hashtags (#, ##, ###, etc.)\n    textoFormatado = textoFormatado.replace(/#{1,}/g, '');\n    \n    // 2. Converte ** (negrito markdown) para * (negrito WhatsApp)\n    textoFormatado = textoFormatado.replace(/\\*\\*/g, '*');\n    \n    return textoFormatado;\n}\n\n// Se ainda n√£o encontrou texto, tenta como string direta\nif (!texto) {\n    texto = typeof $input === 'string' ? $input : '';\n}\n\nconsole.log(\"Texto final para processar:\", texto);\n\n// Aplica a formata√ß√£o\nconst textoLimpo = formatarParaWhatsApp(texto);\n\nconsole.log(\"Texto ap√≥s formata√ß√£o:\", textoLimpo);\n\n// Retorna o resultado\nreturn [{\n    json: {\n        texto_original: texto || \"Texto n√£o encontrado\",\n        texto_formatado: textoLimpo || \"Erro na formata√ß√£o\",\n        debug_input: JSON.stringify($input, null, 2),\n        // Mant√©m outros campos que possam existir\n        ...($input.item?.json || {})\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        1776
      ],
      "id": "460dc1c3-4483-4583-af39-05d9bfb77fce",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para n√≥ Code - Formata√ß√£o WhatsApp\n// Remove todas as # e ajusta negrito para padr√£o WhatsApp\n\n// DEBUG: Vamos ver o que est√° chegando\nconsole.log(\"=== DEBUG ESTRUTURA DE DADOS ===\");\nconsole.log(\"$input:\", JSON.stringify($input, null, 2));\n\n// Tenta diferentes formas de acessar os dados\nlet texto = \"\";\n\n// Op√ß√£o 1: Estrutura padr√£o\nif ($input.item && $input.item.json) {\n    texto = $input.item.json.texto || \n            $input.item.json.message || \n            $input.item.json.content || \n            $input.item.json.body || \n            $input.item.json.output || \"\";\n}\n\n// Op√ß√£o 2: Direto no item\nif (!texto && $input.item) {\n    texto = $input.item.texto || \n            $input.item.message || \n            $input.item.content || \n            $input.item.body || \n            $input.item.output || \"\";\n}\n\n// Op√ß√£o 3: Primeiro item do array\nif (!texto && $input.first && $input.first()) {\n    const firstItem = $input.first();\n    texto = firstItem.json?.texto || \n            firstItem.json?.message || \n            firstItem.json?.content || \n            firstItem.json?.body || \n            firstItem.json?.output || \"\";\n}\n\n// Op√ß√£o 4: √öltimo item\nif (!texto && $input.last && $input.last()) {\n    const lastItem = $input.last();\n    texto = lastItem.json?.texto || \n            lastItem.json?.message || \n            lastItem.json?.content || \n            lastItem.json?.body || \n            lastItem.json?.output || \"\";\n}\n\nconsole.log(\"Texto encontrado:\", texto);\n\n// Fun√ß√£o principal de formata√ß√£o\nfunction formatarParaWhatsApp(texto) {\n    if (!texto || typeof texto !== 'string') {\n        console.log(\"Texto inv√°lido ou vazio:\", texto);\n        return texto;\n    }\n    \n    let textoFormatado = texto;\n    \n    // 1. Remove TODAS as hashtags (#, ##, ###, etc.)\n    textoFormatado = textoFormatado.replace(/#{1,}/g, '');\n    \n    // 2. Converte ** (negrito markdown) para * (negrito WhatsApp)\n    textoFormatado = textoFormatado.replace(/\\*\\*/g, '*');\n    \n    return textoFormatado;\n}\n\n// Se ainda n√£o encontrou texto, tenta como string direta\nif (!texto) {\n    texto = typeof $input === 'string' ? $input : '';\n}\n\nconsole.log(\"Texto final para processar:\", texto);\n\n// Aplica a formata√ß√£o\nconst textoLimpo = formatarParaWhatsApp(texto);\n\nconsole.log(\"Texto ap√≥s formata√ß√£o:\", textoLimpo);\n\n// Retorna o resultado\nreturn [{\n    json: {\n        texto_original: texto || \"Texto n√£o encontrado\",\n        texto_formatado: textoLimpo || \"Erro na formata√ß√£o\",\n        debug_input: JSON.stringify($input, null, 2),\n        // Mant√©m outros campos que possam existir\n        ...($input.item?.json || {})\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        1344
      ],
      "id": "347bf98c-face-4a6e-9259-da725a4ac7f2",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// C√≥digo para n√≥ Code - Formata√ß√£o WhatsApp\n// Remove todas as # e ajusta negrito para padr√£o WhatsApp\n\n// DEBUG: Vamos ver o que est√° chegando\nconsole.log(\"=== DEBUG ESTRUTURA DE DADOS ===\");\nconsole.log(\"$input:\", JSON.stringify($input, null, 2));\n\n// Tenta diferentes formas de acessar os dados\nlet texto = \"\";\n\n// Op√ß√£o 1: Estrutura padr√£o\nif ($input.item && $input.item.json) {\n    texto = $input.item.json.texto || \n            $input.item.json.message || \n            $input.item.json.content || \n            $input.item.json.body || \n            $input.item.json.output || \"\";\n}\n\n// Op√ß√£o 2: Direto no item\nif (!texto && $input.item) {\n    texto = $input.item.texto || \n            $input.item.message || \n            $input.item.content || \n            $input.item.body || \n            $input.item.output || \"\";\n}\n\n// Op√ß√£o 3: Primeiro item do array\nif (!texto && $input.first && $input.first()) {\n    const firstItem = $input.first();\n    texto = firstItem.json?.texto || \n            firstItem.json?.message || \n            firstItem.json?.content || \n            firstItem.json?.body || \n            firstItem.json?.output || \"\";\n}\n\n// Op√ß√£o 4: √öltimo item\nif (!texto && $input.last && $input.last()) {\n    const lastItem = $input.last();\n    texto = lastItem.json?.texto || \n            lastItem.json?.message || \n            lastItem.json?.content || \n            lastItem.json?.body || \n            lastItem.json?.output || \"\";\n}\n\nconsole.log(\"Texto encontrado:\", texto);\n\n// Fun√ß√£o principal de formata√ß√£o\nfunction formatarParaWhatsApp(texto) {\n    if (!texto || typeof texto !== 'string') {\n        console.log(\"Texto inv√°lido ou vazio:\", texto);\n        return texto;\n    }\n    \n    let textoFormatado = texto;\n    \n    // 1. Remove TODAS as hashtags (#, ##, ###, etc.)\n    textoFormatado = textoFormatado.replace(/#{1,}/g, '');\n    \n    // 2. Converte ** (negrito markdown) para * (negrito WhatsApp)\n    textoFormatado = textoFormatado.replace(/\\*\\*/g, '*');\n    \n    return textoFormatado;\n}\n\n// Se ainda n√£o encontrou texto, tenta como string direta\nif (!texto) {\n    texto = typeof $input === 'string' ? $input : '';\n}\n\nconsole.log(\"Texto final para processar:\", texto);\n\n// Aplica a formata√ß√£o\nconst textoLimpo = formatarParaWhatsApp(texto);\n\nconsole.log(\"Texto ap√≥s formata√ß√£o:\", textoLimpo);\n\n// Retorna o resultado\nreturn [{\n    json: {\n        texto_original: texto || \"Texto n√£o encontrado\",\n        texto_formatado: textoLimpo || \"Erro na formata√ß√£o\",\n        debug_input: JSON.stringify($input, null, 2),\n        // Mant√©m outros campos que possam existir\n        ...($input.item?.json || {})\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        2256
      ],
      "id": "ba35a4ac-16b7-41a9-bbdf-9c6b2d4f2872",
      "name": "Code3"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "calendarId": {
          "__rl": true,
          "value": "vitorcardosolido@gmail.com",
          "mode": "list",
          "cachedResultName": "vitorcardosolido@gmail.com"
        },
        "triggerOn": "eventEnded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTrigger",
      "typeVersion": 1,
      "position": [
        -1808,
        2256
      ],
      "id": "3459e2bf-8a00-4a32-93cb-d47cf46647ee",
      "name": "NPS1",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "vKtajF8ftpbBh1dD",
          "name": "youtube teste"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -976,
        2048
      ],
      "id": "51529497-c76a-4cb3-9b84-c07aac3d3ce8",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "LYZ43jB1xTisnjmj",
          "name": "youtube"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Busca Usu√°rio NPS').last().json.cliente_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -576,
        2464
      ],
      "id": "257bc686-391f-4406-95e2-70af4f50233f",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "ffurvj1Wcn2BTtNk",
          "name": "Youtube teste"
        }
      }
    },
    {
      "parameters": {
        "content": "# Cria tabela clientes\n\n````\ncreate table public.clientes_clinica (\n  \"Nome\" text null,\n  numero text null,\n  created_at timestamp with time zone not null default (now() AT TIME ZONE 'America/Sao_Paulo'::text),\n  id uuid not null default gen_random_uuid (),\n  nota_nps numeric null,\n  clinica_id uuid not null,\n  user_id uuid null,\n  constraint clientes_clinica_youtube_pkey primary key (id),\n  constraint clientes_clinica_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,\n  constraint clientes_clinica_youtube_clinica_id_fkey foreign KEY (clinica_id) references usuarios (id)\n) TABLESPACE pg_default;\n\ncreate index IF not exists idx_clientes_clinica on public.clientes_clinica using btree (clinica_id) TABLESPACE pg_default;\n````\n\n# Cria tabela de memoria\n\n````\ncreate table public.n8n_chat_histories (\n  id serial not null,\n  session_id character varying(255) not null,\n  message jsonb not null,\n  created_at timestamp with time zone null default now(),\n  constraint n8n_chat_histories_pkey primary key (id)\n) TABLESPACE pg_default;\n````\n\n# Cria tabela de produtos\n\n````\ncreate table public.produtos_clinicas (\n  id uuid not null default gen_random_uuid (),\n  nome_procedimento text null,\n  pre√ßo text null,\n  \"Tempo\" text null,\n  clinica_id uuid not null,\n  user_id uuid null,\n  constraint Produtos_agenda_escalavel_pkey primary key (id),\n  constraint Produtos_agenda_escalavel_clinica_id_fkey foreign KEY (clinica_id) references usuarios (id),\n  constraint produtos_clinicas_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE\n) TABLESPACE pg_default;\n\ncreate index IF not exists idx_produtos_clinica on public.produtos_clinicas using btree (clinica_id) TABLESPACE pg_default;\n````",
        "height": 1264,
        "width": 1168
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        496,
        1056
      ],
      "typeVersion": 1,
      "id": "58489ea6-fd55-4e80-916c-d64653476871",
      "name": "Sticky Note"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "primary-production-53052.up.railway.app",
            "user-agent": "Mozilla/5.0 (iPod touch; CPU iPhone OS 13_2_1 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) FxiOS/111.0 Mobile/15E148 Safari/605.1.15",
            "content-length": "796",
            "content-type": "application/json",
            "origin": "https://api.z-api.io",
            "server": "Z-API",
            "x-forwarded-for": "146.235.42.234",
            "x-forwarded-host": "primary-production-53052.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/us-east4-eqdc4a",
            "x-railway-request-id": "KVD_792PRV-b_i3fAax-fw",
            "x-real-ip": "146.235.42.234",
            "x-request-start": "1751722910621",
            "z-api-token": "A9DD8674F5CA43F822A7565A",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "isStatusReply": false,
            "chatLid": "105231211860127@lid",
            "connectedPhone": "555195674028",
            "waitingMessage": false,
            "isEdit": false,
            "isGroup": false,
            "isNewsletter": false,
            "instanceId": "3E1582B8C1EFB00BF098BAA23289AB67",
            "messageId": "3F7C4021E67DB4B808C5",
            "phone": "555198222005",
            "fromMe": false,
            "momment": 1751722909000,
            "status": "RECEIVED",
            "chatName": "Vitor Cardoso",
            "senderPhoto": null,
            "senderName": "Vitor Cardoso",
            "photo": "https://pps.whatsapp.net/v/t61.24694-24/436952688_823759469819243_1917532092669313342_n.jpg?ccb=11-4&oh=01_Q5Aa1wG-9T5a4l7muMmqwQqgCLfBK2qTIemf0zN_36i7dovgeA&oe=6876474A&_nc_sid=5e03e0&_nc_cat=111",
            "broadcast": false,
            "participantLid": null,
            "messageExpirationSeconds": 0,
            "forwarded": false,
            "type": "ReceivedCallback",
            "fromApi": false,
            "text": {
              "message": "Bom dia, agende uma consulta inicial para hoje as 10 por favor"
            }
          },
          "webhookUrl": "https://primary-production-53052.up.railway.app/webhook/61cfae58-b041-4717-8b23-65c372a72aab",
          "executionMode": "production"
        }
      }
    ],
    "Seta Mudan√ßa": [
      {
        "json": {
          "kind": "calendar#event",
          "etag": "\"3503333910044190\"",
          "id": "39084358",
          "status": "confirmed",
          "htmlLink": "https://www.google.com/calendar/event?eid=N2MybHZlNGpnNWI0Mm1zcDViYW9lZTM2ZDcgZWR1YXJkb3NvbGlkb2FpQG0",
          "created": "2025-07-04T22:09:14.000Z",
          "updated": "2025-07-04T22:09:15.022Z",
          "summary": "Teste",
          "creator": {
            "email": "eduardosolidoai@gmail.com",
            "self": true
          },
          "organizer": {
            "email": "eduardosolidoai@gmail.com",
            "self": true
          },
          "start": {
            "dateTime": "2025-07-06T13:30:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "end": {
            "dateTime": "2025-07-06T14:30:00-03:00",
            "timeZone": "America/Sao_Paulo"
          },
          "iCalUID": "7c2lve4jg5b42msp5baoee36d7@google.com",
          "sequence": 0,
          "reminders": {
            "useDefault": true
          },
          "eventType": "default",
          "eventoFormatado": "üîÑ EVENTO ATUALIZADO\n\nüìÖ Teste\nüìÜ Data: 06/07/2025\nüïê Hor√°rio: 16:30 √†s 17:30\nüìã Status: Confirmado\n‚è∞ Tempo restante: 1 dia(s)\nüîÑ Atualizado em: 04/07/2025, 19:09:15",
          "tipoEvento": "atualiza√ß√£o",
          "emailConvidado": null,
          "data": "06/07/2025",
          "horario": "16:30 √†s 17:30",
          "horaInicio": "16:30",
          "horaFim": "17:30",
          "dataCompleta": "domingo, 6 de julho de 2025 √†s 13:30",
          "statusEvento": "Confirmado",
          "tempoRestante": "1 dia(s)",
          "ultimaAtualizacao": "04/07/2025, 19:09:15",
          "sequencia": 0
        }
      }
    ]
  },
  "connections": {
    "deletar_agenda": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "criar_agenda": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "formata√ß√£oTexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Responde usu√°rio": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "GET Supabase User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Supabase User": {
      "main": [
        [
          {
            "node": "IF User Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF User Exists": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Supabase User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Supabase User": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mensagem",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aviso de Imagem",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aviso contra v√≠deo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aviso contra doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aviso contra v√≠deo": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Aviso contra doc": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Redis3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio": {
      "main": [
        [
          {
            "node": "OpenAI2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Aviso de Imagem": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Redis3": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis4": {
      "main": [
        [
          {
            "node": "Junta tudo em uma s√≥ e deleta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Redis4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Busca Produtos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Contabilizar Caracteres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contabilizar Caracteres": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Responde usu√°rio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formata√ß√£oTexto": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "busca_agenda": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "atualizar_agenda": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "NPS": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Parse Procedimentos": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Produtos": {
      "main": [
        [
          {
            "node": "Parse Procedimentos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Junta tudo em uma s√≥ e deleta": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Avisa  Cancelamento": {
      "main": [
        [
          {
            "node": "Seta Cancelamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Avisa Agendamento": {
      "main": [
        [
          {
            "node": "Seta Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Avisa Mudan√ßa": {
      "main": [
        [
          {
            "node": "Seta Mudan√ßa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IA AVISO  ATUALIZA√á√ÉO": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IA AVISO AGENDAMENTO": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "IA AVISO AGENDAMENTO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Seta Mudan√ßa": {
      "main": [
        [
          {
            "node": "Busca Usu√°rio Atualiza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Seta Agendamento": {
      "main": [
        [
          {
            "node": "Busca Usu√°rio Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Seta Cancelamento": {
      "main": [
        [
          {
            "node": "Busca Usu√°rio Cancelamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "IA AVISA CANCELAMENTO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "IA AVISA CANCELAMENTO": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IA NPS": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Usu√°rio NPS": {
      "main": [
        [
          {
            "node": "Hist√≥rico NPS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Usu√°rio Atualiza√ß√£o": {
      "main": [
        [
          {
            "node": "Hist√≥rico Atualiza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Usu√°rio Agendamento": {
      "main": [
        [
          {
            "node": "Hist√≥rico Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Busca Usu√°rio Cancelamento": {
      "main": [
        [
          {
            "node": "Hist√≥rico Cancelamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hist√≥rico Cancelamento": {
      "main": [
        [
          {
            "node": "IA AVISA CANCELAMENTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hist√≥rico Atualiza√ß√£o": {
      "main": [
        [
          {
            "node": "IA AVISO  ATUALIZA√á√ÉO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hist√≥rico NPS": {
      "main": [
        [
          {
            "node": "IA NPS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hist√≥rico Agendamento": {
      "main": [
        [
          {
            "node": "IA AVISO AGENDAMENTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "IA NPS",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Mensagem Cancelamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Mensagem Atualiza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Mensagem Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Mensagem NPS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NPS1": {
      "main": [
        [
          {
            "node": "Busca Usu√°rio NPS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "IA AVISO  ATUALIZA√á√ÉO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "IA NPS",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f6c55c57-fdb8-4da3-bdb2-16ec248c3cc8",
  "meta": {
    "instanceId": "9dc82ef6f13c99b5c676a97615c1eb196eff186a870f045f2d398e839f766ca2"
  },
  "id": "RFbwdHScNRW9ow7J",
  "tags": []
}
